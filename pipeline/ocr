#!/bin/bash
function go_mod_tidy {

  count=0
  while [ $count -lt 100 ]; do
      ret_go_mod=0
      go mod tidy || ret_go_mod=$?
      if [ $ret_go_mod -eq 0 ]; then
        break
      fi
      sleep 3
      echo "========try next to get lib========"
      ((count++))
  done

  if [ $count -eq 100 ]; then
    echo "can not download lib"
    echo "1" > /tmp/makebinary_result
  else
    echo "success to download lib"
  fi
}

function run {
  repo_owner="$1"
  case_scenario="$2"
  case_importance="$3"
  case_filter="$4"
  case_timeout="$5"

  if [[ "x${case_timeout}x" == "xx" ]] || [[ "${case_timeout}" == "null" ]]; then
    echo "case timeout is ${case_timeout}, set it to be default value 35m"
    case_timeout="35"
  else
    case_timeout=${case_timeout:4}
    echo "case timeout is ${case_timeout}m"
  fi
  
  http_proxy_tmp=${http_proxy}
  https_proxy_tmp=${https_proxy}
  if [[ "x${http_proxy}x" != "xx" ]] || [[ "x${https_proxy}x" != "xx" ]]; then
    echo "unset http_proxy https_proxy"
    unset http_proxy https_proxy
  fi
  make clean
  if [ "${repo_owner}" == "openshift" ]; then
    export DUMP_EVENTS_ON_FAILURE=false
    export ENABLE_PRINT_EVENT_STDOUT=true
    go_mod_tidy
    echo "make all"
    make all
    echo $? > /tmp/makebinary_result
  else
    unset DUMP_EVENTS_ON_FAILURE
    export ENABLE_PRINT_EVENT_STDOUT=true
    go_mod_tidy
    echo "make build"
    make build
    echo $? > /tmp/makebinary_result
  fi
  if [[ "x${http_proxy_tmp}x" != "xx" ]] || [[ "x${https_proxy_tmp}x" != "xx" ]]; then
    echo "set env http_proxy https_proxy"
    export http_proxy=${http_proxy_tmp}
    export https_proxy=${https_proxy_tmp}
  fi

  if [ "${case_importance}" == "all" ]; then
    case_importance=""
  fi
  ./bin/extended-platform-tests run all --dry-run | \
    grep -E "${case_scenario}" | grep -E "${case_importance}" > ./case_selected

  handle_filters "${case_filter}"
  echo "------------------the case selected------------------"
  cat ./case_selected
  echo "-----------------------------------------------------"

  ./bin/extended-platform-tests run --max-parallel-tests 6 --timeout ${case_timeout}"m" --junit-dir=./ -f ./case_selected
  rm -fr ./case_selected
}

function handle_filters {
  filter_tmp="$1"
  if [ "${filter_tmp}" == "null" ]; then
    echo "there is no filter"
    return
  fi
  echo "try to handler filters..."
  filter_tmp=${filter_tmp:4}
  filter_tmp="~Flaky&;~DEPRECATED&;${filter_tmp}"
  filters=(${filter_tmp//;/ })

  filters_and=()
  filters_or=()
  for filter in "${filters[@]}"
  do
    echo "${filter}"
    valid_filter "${filter}"
    filter_logical="$(echo $filter | grep -Eo '[&]?$')"

    if [ "W${filter_logical}W" == "W&W" ]; then
      filters_and+=(${filter})
    else
      filters_or+=(${filter})
    fi
  done

  for filter in ${filters_and[*]}
  do
    echo "handle filter_and ${filter}"
    handle_and_filter "${filter}"
  done

  rm -fr ./case_selected_or
  for filter in ${filters_or[*]}
  do
    echo "handle filter_or ${filter}"
    handle_or_filter "${filter}"
  done
  [ -e ./case_selected_or ] && sort -u ./case_selected_or > ./case_selected && rm -fr ./case_selected_or
}

function valid_filter {
  filter="$1"
  if ! echo ${filter} | grep -E '^[~]?[a-zA-Z0-9_]{1,}[&]?$'; then
    echo "the filter "${filter}" is not correct format. it should be ^[~]?[a-zA-Z0-9_]{1,}[&]?$"
    exit 1
  fi
  action="$(echo $filter | grep -Eo '^[~]?')"
  value="$(echo $filter | grep -Eo '[a-zA-Z0-9_]{1,}')"
  logical="$(echo $filter | grep -Eo '[&]?$')"
  echo $action"--"$value"--"$logical
}

function handle_and_filter {
  action="$(echo $1 | grep -Eo '^[~]?')"
  value="$(echo $1 | grep -Eo '[a-zA-Z0-9_]{1,}')"

  if [ "W${action}W" == "WW" ]; then
    cat ./case_selected | grep -E "${value}" > ./case_selected_and
  else
    cat ./case_selected | grep -v -E "${value}" > ./case_selected_and
  fi
  [ -e ./case_selected_and ] && cp -fr ./case_selected_and ./case_selected && rm -fr ./case_selected_and
}
function handle_or_filter {
  action="$(echo $1 | grep -Eo '^[~]?')"
  value="$(echo $1 | grep -Eo '[a-zA-Z0-9_]{1,}')"

  if [ "W${action}W" == "WW" ]; then
    cat ./case_selected | grep -E "${value}" >> ./case_selected_or
  else
    cat ./case_selected | grep -v -E "${value}" >> ./case_selected_or
  fi
}
run "$@"
