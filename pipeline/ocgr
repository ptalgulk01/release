#!/bin/bash
set +x
#generae report

function get_build_type {

  # the following is Disruptive

  if [[ "${FILTERSO}" == *"Disruptive"* ]] && [[ "${FILTERSO}" != *"~Disruptive"* ]] && [[ "${FILTERSO}" == *"Basic"* ]] && [[ "${FILTERSO}" == *"Serial"* ]] && [[ "${FILTERSO}" != *"~Serial"* ]]; then
    buildtype="-YDBS"
    return
  fi

  if [[ "${FILTERSO}" == *"Disruptive"* ]] && [[ "${FILTERSO}" != *"~Disruptive"* ]] && [[ "${FILTERSO}" == *"Basic"* ]] && [[ "${FILTERSO}" == *"~Serial"* ]]; then
    buildtype="-YDBP"
    return
  fi

  if [[ "${FILTERSO}" == *"Disruptive"* ]] && [[ "${FILTERSO}" != *"~Disruptive"* ]] && [[ "${FILTERSO}" == *"Basic"* ]]; then
    buildtype="-YDBN"
    return
  fi

  if [[ "${FILTERSO}" == *"Disruptive"* ]] && [[ "${FILTERSO}" != *"~Disruptive"* ]] && [[ "${FILTERSO}" == *"Intermediate"* ]] && [[ "${FILTERSO}" == *"Serial"* ]] && [[ "${FILTERSO}" != *"~Serial"* ]]; then
    buildtype="-YDIS"
    return
  fi

  if [[ "${FILTERSO}" == *"Disruptive"* ]] && [[ "${FILTERSO}" != *"~Disruptive"* ]] && [[ "${FILTERSO}" == *"Intermediate"* ]] && [[ "${FILTERSO}" == *"~Serial"* ]]; then
    buildtype="-YDIP"
    return
  fi

  if [[ "${FILTERSO}" == *"Disruptive"* ]] && [[ "${FILTERSO}" != *"~Disruptive"* ]] && [[ "${FILTERSO}" == *"Intermediate"* ]]; then
    buildtype="-YDIN"
    return
  fi

  if [[ "${FILTERSO}" == *"Disruptive"* ]] && [[ "${FILTERSO}" != *"~Disruptive"* ]] && [[ "${FILTERSO}" == *"Serial"* ]] && [[ "${FILTERSO}" != *"~Serial"* ]]; then
    buildtype="-YDNS"
    return
  fi

  if [[ "${FILTERSO}" == *"Disruptive"* ]] && [[ "${FILTERSO}" != *"~Disruptive"* ]] && [[ "${FILTERSO}" == *"~Serial"* ]]; then
    buildtype="-YDNP"
    return
  fi

  if [[ "${FILTERSO}" == *"Disruptive"* ]] && [[ "${FILTERSO}" != *"~Disruptive"* ]]; then
    buildtype="-YDNN"
    return
  fi

  # the following is non-Disruptive

  if [[ "${FILTERSO}" == *"Basic"* ]] && [[ "${FILTERSO}" == *"Serial"* ]] && [[ "${FILTERSO}" != *"~Serial"* ]]; then
    buildtype="-NDBS"
    return
  fi

  if [[ "${FILTERSO}" == *"Basic"* ]] && [[ "${FILTERSO}" == *"~Serial"* ]]; then
    buildtype="-NDBP"
    return
  fi

  if [[ "${FILTERSO}" == *"Basic"* ]]; then
    buildtype="-NDBN"
    return
  fi

  if [[ "${FILTERSO}" == *"Intermediate"* ]] && [[ "${FILTERSO}" == *"Serial"* ]] && [[ "${FILTERSO}" != *"~Serial"* ]]; then
    buildtype="-NDIS"
    return
  fi

  if [[ "${FILTERSO}" == *"Intermediate"* ]] && [[ "${FILTERSO}" == *"~Serial"* ]]; then
    buildtype="-NDIP"
    return
  fi

  if [[ "${FILTERSO}" == *"Intermediate"* ]]; then
    buildtype="-NDIN"
    return
  fi

  if [[ "${FILTERSO}" == *"Serial"* ]] && [[ "${FILTERSO}" != *"~Serial"* ]]; then
    buildtype="-NDNS"
    return
  fi

  if [[ "${FILTERSO}" == *"~Serial"* ]]; then
    buildtype="-NDNP"
    return
  fi

  buildtype="-NDNN"

}

WORKBUILDDIR=$1
WORKSPACE=$2
VERSION=$(echo $3 | tr -dc '0-9')
VERSION=${VERSION: 0:1}"."${VERSION: 1}
LAUNCHID=$4
PROFILENAME=$5
LAUNCHTRIAL=$6
TWOREPOOWNER=$7
BUILDNUM=$8
FILTERSO=$9
ATTRIBUTIONOPTION=${10}
if [ "${LAUNCHID}" == "null" ]; then
  LAUNCHID=""
else
  LAUNCHID=${LAUNCHID:4}
fi
if [ "${PROFILENAME}" == "null" ]; then
  PROFILENAME=""
else
  PROFILENAME=${PROFILENAME:4}
fi
if [ "${FILTERSO}" == "null" ]; then
  FILTERSO=""
else
  FILTERSO=${FILTERSO:4}
fi
if [ "X${LAUNCHTRIAL}X" == "XnullyesX" ]; then
  LAUNCHTRIAL="yes"
else
  LAUNCHTRIAL="no"
fi
if [ "X${ATTRIBUTIONOPTION}X" == "XnullX" ] || [ "X${ATTRIBUTIONOPTION}X" == "XX" ]; then
  ATTRIBUTIONOPTION=""
else
  ATTRIBUTIONOPTION=${ATTRIBUTIONOPTION:4}
fi

get_build_type

rm -fr handleattribution.py && eval cp -fr ${WORKSPACE}"/private/pipeline/handleattribution.py" .
pipelinetype=`python3 handleattribution.py -a get -y "${ATTRIBUTIONOPTION}" -p pipeline_type || true `
if [ "${pipelinetype}" != "None" ] && [ "${pipelinetype}" != "failtogetvalue" ] && [ "${pipelinetype}" != "" ]; then
  echo ${pipelinetype}
  case ${pipelinetype} in
    stagepipeline)
      echo "it is stage pipeline"
      profiletype="stage"
      ;;
    prodpipeline)
      echo "it is prod pipeline"
      profiletype="prod"
      ;;
    upgradepipeline)
      echo "it is upgrade pipeline"
      profiletype="upgrade"
      ;;
    telcopipeline)
      echo "it is telco pipeline"
      profiletype="telco"
      ;;
    vecipipeline)
      echo "it is veci pipeline"
      profiletype="ve"
      ;;
    *)
      echo "it is prerelease pipeline"
      profiletype="ci"
      ;;
  esac
else
  echo "can not get pipeline_type, try to get profile from ci"
  profiletype="ci"
fi

buildversiontype=`python3 handleattribution.py -a get -y "${ATTRIBUTIONOPTION}" -p build_version || true `
if [ "${buildversiontype}" != "None" ] && [ "${buildversiontype}" != "failtogetvalue" ] && [ "${buildversiontype}" != "" ]; then
  if [[ "${buildversiontype}" == *"arm64"* ]] || [[ "${buildversiontype}" == *"aarch64"* ]]; then
    buildversiontype="arm64"
  else
    buildversiontype="nonarm"
  fi
else
  echo "can not get build_version, treat it as non-arm"
  buildversiontype="nonarm"
fi

cd ${WORKBUILDDIR}
resultfile=`ls -rt -1 junit_e2e_* 2>&1 || true`
echo $resultfile
if (echo $resultfile | grep -E "no matches found") || (echo $resultfile | grep -E "No such file or directory") ; then
  echo "there is no result file generated"
  exit 1
fi
current_time=`date "+%Y-%m-%d-%H-%M-%S"`
newresultfile="junit_e2e_"${current_time}".xml"
rm -fr handleresult.py && eval cp -fr ${WORKSPACE}"/private/pipeline/handleresult.py" .
rm -fr reportportal.py && eval cp -fr ${WORKSPACE}"/private/pipeline/reportportal.py" .
python3 handleresult.py -a replace -i ${resultfile} -o ${newresultfile} && rm -fr ${resultfile}

rpresult="SUCCESS"
if [ "X${LAUNCHID}X" != "XX" ]; then
  if (echo ${LAUNCHID} | grep -E '^([0-9]{8})-([0-9]{4})$') || (echo ${LAUNCHID} | grep -E '^([0-9]{8})-([0-9]{4})_([0-9]{1,2})$'); then
    LAUNCHIDVALID=true
  else
    LAUNCHIDVALID=false
  fi
  if [[ "X${profiletype}X" == "XciX" ]] || [[ "X${profiletype}X" == "XtelcoX" ]] || [[ "X${profiletype}X" == "XupgradeX" ]]; then
    if [ "X${buildversiontype}X" == "Xarm64X" ]; then
      existing=`ls ${WORKSPACE}"/cip/"${VERSION}"/arm/"|grep "${PROFILENAME}"".test"|grep "test_run.yaml"|wc -l|xargs`
    else
      existing=`ls ${WORKSPACE}"/cip/"${VERSION}"/"|grep "${PROFILENAME}"".test"|grep "test_run.yaml"|wc -l|xargs`
    fi
  elif [[ "X${profiletype}X" == "XstageX" ]] || [[ "X${profiletype}X" == "XveX" ]]; then
    existing=`ls ${WORKSPACE}"/cip/"${profiletype}"/"${VERSION}"/"|grep "${PROFILENAME}"".test"|grep "test_run.yaml"|wc -l|xargs`
  else
    existing=`ls ${WORKSPACE}"/misc/jenkins/"${profiletype}"/"${VERSION}"/"|grep "${PROFILENAME}"".test"|grep "test_run.yaml"|wc -l|xargs`
  fi
  if [ "X${existing}X" == "X1X" ]; then
    PROFILENAMEVALID=true
  else
    PROFILENAMEVALID=false
  fi

  if [ "X${TWOREPOOWNER}X" == "Xopenshift-openshiftX" ]; then
    REPOOWNERVALID=true
  else
    REPOOWNERVALID=false
  fi

  if [ "${LAUNCHIDVALID}" != true ] || [ "${PROFILENAMEVALID}" != true ]  || [ "${REPOOWNERVALID}" != true ]; then
    if ! [[ "X${profiletype}X" == "XtelcoX" ]]; then
      VERSION="personalbuild"
    fi
    PROFILENAME=""
  fi

  rpmmtoken=`cat /root/rp.key | jq  -r ".ginkgo_rp_mmtoken"`
  rppmtoken=`cat /root/rp.key | jq  -r ".ginkgo_rp_pmtoken"`
  eval rm -fr "*.zip" "import-*.xml"
  python3 handleresult.py -a split -i ${newresultfile}
  for subteamfile in `ls import-*.xml`; do
    subteam=${subteamfile:7:-4}
    eval zip -r "${LAUNCHID}.zip" "${subteamfile}"
    if [[ "X${profiletype}X" == "XciX" ]] || [[ "X${profiletype}X" == "XtelcoX" ]] || [[ "X${profiletype}X" == "XupgradeX" ]]; then
      if [ "X${buildversiontype}X" == "Xarm64X" ]; then
        ppath="../cip/"${VERSION}"/arm/"
      else
        ppath="../cip/"${VERSION}"/"
      fi
    elif [[ "X${profiletype}X" == "XstageX" ]] || [[ "X${profiletype}X" == "XveX" ]]; then
      ppath="../cip/"${profiletype}"/"${VERSION}"/"
    else
      ppath="../misc/jenkins/"${profiletype}"/"${VERSION}"/"
    fi
    ret=`python3 reportportal.py -a import -f "${LAUNCHID}.zip" -s "${subteam}" -v "${VERSION}" -ao "${ATTRIBUTIONOPTION}" -bn "${BUILDNUM}""${buildtype}""_${JOB_BASE_NAME}" -pn "${PROFILENAME}" -pp "${ppath}" -t "${rpmmtoken}" -ta "${rppmtoken}" -trial "${LAUNCHTRIAL}" 2>&1 || true`
    eval rm -fr  "${LAUNCHID}.zip"
    result=`echo -e ${ret} | tail -1|xargs`
    if ! [ "X${result}X" == "XSUCCESSX" ]; then
      rpresult="FAIL"
      echo -e "the subteam ${subteam} result import fails\n"
      echo -e ${ret}
    fi
  done
  eval rm -fr "import-*.xml"

  # ret=`python3 reportportal.py -a merge -l "${LAUNCHID}" 2>&1 || true`
  # result=`echo ${ret} | tail -1|xargs`
  # if [ "X${result}X" == "XFAILX" ]; then
  #   rpresult="FAIL"
  #   echo -e "the result merge fails\n"
  #   echo -e ${ret}
  # fi
fi

resultsummary=`python3 handleresult.py -a get -i ${newresultfile} 2>&1 || true`
if (echo $resultsummary | grep -q -E "FAIL") ; then
  finalresult="FAIL"
else
  finalresult="SUCCESS"
fi
echo -e "\n\n\n"
echo -e ${resultsummary}
if [ "${finalresult}" == "SUCCESS" ] ; then
  echo "the build is SUCCESS"
  if [ "${rpresult}" == "FAIL" ] ; then
    echo "FAIL to send result to reportprotal"
    exit 1
  fi
  exit 0
else
  echo "the build is FAIL"
  if [ "${rpresult}" == "FAIL" ] ; then
    echo "FAIL to send result to reportprotal"
  fi
  exit 1
fi
set -x
