#!/bin/bash
set +x
#get fail case from existing launch for rerun

function get_build_type {

  # the following is Disruptive

  if [[ "${FILTERSO}" == *"Disruptive"* ]] && [[ "${FILTERSO}" != *"~Disruptive"* ]] && [[ "${FILTERSO}" == *"Basic"* ]] && [[ "${FILTERSO}" == *"Serial"* ]] && [[ "${FILTERSO}" != *"~Serial"* ]]; then
    buildtype="-YDBS"
    return
  fi

  if [[ "${FILTERSO}" == *"Disruptive"* ]] && [[ "${FILTERSO}" != *"~Disruptive"* ]] && [[ "${FILTERSO}" == *"Basic"* ]] && [[ "${FILTERSO}" == *"~Serial"* ]]; then
    buildtype="-YDBP"
    return
  fi

  if [[ "${FILTERSO}" == *"Disruptive"* ]] && [[ "${FILTERSO}" != *"~Disruptive"* ]] && [[ "${FILTERSO}" == *"Basic"* ]]; then
    buildtype="-YDBN"
    return
  fi

  if [[ "${FILTERSO}" == *"Disruptive"* ]] && [[ "${FILTERSO}" != *"~Disruptive"* ]] && [[ "${FILTERSO}" == *"Intermediate"* ]] && [[ "${FILTERSO}" == *"Serial"* ]] && [[ "${FILTERSO}" != *"~Serial"* ]]; then
    buildtype="-YDIS"
    return
  fi

  if [[ "${FILTERSO}" == *"Disruptive"* ]] && [[ "${FILTERSO}" != *"~Disruptive"* ]] && [[ "${FILTERSO}" == *"Intermediate"* ]] && [[ "${FILTERSO}" == *"~Serial"* ]]; then
    buildtype="-YDIP"
    return
  fi

  if [[ "${FILTERSO}" == *"Disruptive"* ]] && [[ "${FILTERSO}" != *"~Disruptive"* ]] && [[ "${FILTERSO}" == *"Intermediate"* ]]; then
    buildtype="-YDIN"
    return
  fi

  if [[ "${FILTERSO}" == *"Disruptive"* ]] && [[ "${FILTERSO}" != *"~Disruptive"* ]] && [[ "${FILTERSO}" == *"Serial"* ]] && [[ "${FILTERSO}" != *"~Serial"* ]]; then
    buildtype="-YDNS"
    return
  fi

  if [[ "${FILTERSO}" == *"Disruptive"* ]] && [[ "${FILTERSO}" != *"~Disruptive"* ]] && [[ "${FILTERSO}" == *"~Serial"* ]]; then
    buildtype="-YDNP"
    return
  fi

  if [[ "${FILTERSO}" == *"Disruptive"* ]] && [[ "${FILTERSO}" != *"~Disruptive"* ]]; then
    buildtype="-YDNN"
    return
  fi

  # the following is non-Disruptive

  if [[ "${FILTERSO}" == *"Basic"* ]] && [[ "${FILTERSO}" == *"Serial"* ]] && [[ "${FILTERSO}" != *"~Serial"* ]]; then
    buildtype="-NDBS"
    return
  fi

  if [[ "${FILTERSO}" == *"Basic"* ]] && [[ "${FILTERSO}" == *"~Serial"* ]]; then
    buildtype="-NDBP"
    return
  fi

  if [[ "${FILTERSO}" == *"Basic"* ]]; then
    buildtype="-NDBN"
    return
  fi

  if [[ "${FILTERSO}" == *"Intermediate"* ]] && [[ "${FILTERSO}" == *"Serial"* ]] && [[ "${FILTERSO}" != *"~Serial"* ]]; then
    buildtype="-NDIS"
    return
  fi

  if [[ "${FILTERSO}" == *"Intermediate"* ]] && [[ "${FILTERSO}" == *"~Serial"* ]]; then
    buildtype="-NDIP"
    return
  fi

  if [[ "${FILTERSO}" == *"Intermediate"* ]]; then
    buildtype="-NDIN"
    return
  fi

  if [[ "${FILTERSO}" == *"Serial"* ]] && [[ "${FILTERSO}" != *"~Serial"* ]]; then
    buildtype="-NDNS"
    return
  fi

  if [[ "${FILTERSO}" == *"~Serial"* ]]; then
    buildtype="-NDNP"
    return
  fi

  buildtype="-NDNN"

}

WORKBUILDDIR=$1
WORKSPACE=$2
LAUNCHID=$3
ORIGSCENARIO="$4"
BUILDNUM=$5
FILTERSO="$6"

if [ "${FILTERSO}" == "null" ]; then
  FILTERSO=""
else
  FILTERSO=${FILTERSO:4}
fi

get_build_type

cd ${WORKBUILDDIR}
rm -fr reportportal.py && eval cp -fr ${WORKSPACE}"/private/pipeline/reportportal.py" .

rpmmtoken=`cat ${WORKSPACE}"/private/secrets/rp/openshift-qe-reportportal.json" | jq  -r ".ginkgo_rp_mmtoken"`
rppmtoken=`cat ${WORKSPACE}"/private/secrets/rp/openshift-qe-reportportal.json" | jq  -r ".ginkgo_rp_pmtoken"`
ret=`python3 reportportal.py -a getfcd -l "${LAUNCHID}" -ss "${ORIGSCENARIO}"  -bn "${BUILDNUM}""${buildtype}""_${JOB_BASE_NAME}" -t "${rpmmtoken}" -ta "${rppmtoken}" 2>&1 || true`
# echo -e "\\\n"${ret}"\\\n"

result=`echo -e ${ret} | tail -1|xargs`
if [[ "$result" == *"-NOREPLACE" ]]; then
  failcaseid="NOREPLACE"
elif [[ "$result" == *"-NORERUN" ]]; then
  failcaseid="NORERUN"
else
  failcaseid="${result}"
fi
echo -e "Start\\\n"${ret}"\\\nthe last line:\\\n"${failcaseid}

set -x
