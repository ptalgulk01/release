#!/bin/bash
#usage: setup-vm goc48 ${WORKBUILDDIR} ${WORKSPACE}/tool_dir
#get oc client
echo $1 $2 $3
NODELABEL=$1
WORKBUILDDIR=$2
WORKDIR=$3
mkdir -p $WORKDIR
CURRENTDIR=`pwd`

http_proxy_tmp=${http_proxy}
https_proxy_tmp=${https_proxy}
if [[ "x${http_proxy}x" != "xx" ]] || [[ "x${https_proxy}x" != "xx" ]]; then
    echo "unset http_proxy https_proxy"
    unset http_proxy https_proxy
fi

sudo rm -rf /tmp/fixture-testdata-*
rm -rf /tmp/*
podman rm -a -f
podman rmi -a -f
sudo rm -f /usr/bin/oc /usr/local/bin/oc /usr/local/bin/opm /usr/local/bin/initializer /usr/local/bin/configmap-server /usr/local/bin/registry-server /usr/bin/*operator*
export no_proxy=quay.io

cd /etc/pki/ca-trust/source/anchors
sudo curl -O --insecure https://password.corp.redhat.com/RH-IT-Root-CA.crt
sudo curl -O --insecure https://password.corp.redhat.com/legacy.crt
sudo curl -O --insecure https://engineering.redhat.com/Eng-CA.crt
sudo update-ca-trust extract
cd $WORKDIR

if echo $NODELABEL | grep -E '^goc([0-9]{2,3})$'; then
  NIGHTLYFLAG=$(echo $NODELABEL | tr -dc '0-9')
  echo $NIGHTLYFLAG
else
  echo "the node label is not correct. For example, goc45"
  exit 1
fi

sudo rm -f /etc/yum.repos.d/redhat_offcial.repo /etc/yum.repos.d/localdev-rhel-8-baseos-rpms.repo /etc/yum.repos.d/google-cloud-sdk.repo /etc/yum.repos.d/azure-cli.repo
sudo cp ${WORKBUILDDIR}/pipeline/repo-file/aos-devel-$NIGHTLYFLAG.repo /etc/yum.repos.d/puddle.repo
sudo ls -lrt /etc/yum.repos.d/
sudo yum remove 'origin*.x86_64' 'atomic-openshift*.x86_64' 'openshift-clients*.x86_64' -y
sudo yum -y --enablerepo=aos-devel-4.12-el8 install openshift-clients
sudo yum -y install jq patch docker
sudo yum clean all -y
sudo pip3 install requests
if [[ "x${http_proxy_tmp}x" != "xx" ]] || [[ "x${https_proxy_tmp}x" != "xx" ]]; then
    echo "set env http_proxy https_proxy"
    export http_proxy=${http_proxy_tmp}
    export https_proxy=${https_proxy_tmp}
fi
echo "oc version:"
oc version
retVal=$?
if [ $retVal -ne 0 ]; then
    echo "install oc failed"
    exit 1
fi

#get operatorSDK
if echo $INSTALL_TOOLS | grep -i 'operatorSDK' > /dev/null; then
    unset http_proxy https_proxy
    echo "------------------get operatorSDK------------------------"
    mkdir ${WORKSPACE}/osdk
    BUILD_CMD="make build"
    PR=""
    array=(${INSTALL_TOOLS//;/ })  
    for tool_name_index in ${array[@]}
    do
        if echo $tool_name_index | grep -i 'operatorSDK' > /dev/null; then
            echo $tool_name_index
            echo "get operatorSDK PR"
            PR=`echo $INSTALL_TOOLS | tr -cd "[0-9]"`
            echo "PR is ${PR}"
        fi
    done

    if [[ "x${PR}x" != "xx" ]]; then
        echo "get code from PR ${PR} "
        git clone https://github.com/openshift/ocp-release-operator-sdk.git ${WORKSPACE}/osdk
        cd ${WORKSPACE}/osdk
        git remote add upstream https://github.com/openshift/ocp-release-operator-sdk.git
        git fetch upstream pull/${PR}/head:downstreamPR
        git checkout downstreamPR
        git status
        BUILD_CMD="make -f ci/prow.Makefile patch build"
    else
        if [ "${JENKINS_AGENT}" == 'goc412' ]; then
            git clone --depth=1 git@github.com:operator-framework/operator-sdk.git ${WORKSPACE}/osdk --branch master
        else
            BRANCH="release-${NIGHTLYFLAG:0:1}.${NIGHTLYFLAG:1}"
            BUILD_CMD="make -f ci/prow.Makefile patch build"
            git clone --depth=1 git@github.com:openshift/ocp-release-operator-sdk.git ${WORKSPACE}/osdk --branch ${BRANCH}
        fi
    fi
    cd ${WORKSPACE}/osdk
    echo "buid command is [${BUILD_CMD}]"
    eval "${BUILD_CMD}"
    ls -lrt build/
    mv -f build/* $WORKDIR
    rm -fr ../osdk
    chown -R cloud-user:cloud-user $WORKDIR
    operator-sdk version
    cd $WORKDIR
else
    echo "skip get operatorSDK"
fi

#get hypershift
if echo $INSTALL_TOOLS | grep -i 'hypershift' > /dev/null; then
    unset http_proxy https_proxy
    echo "------------------get hypershift------------------------"
    mkdir ${WORKSPACE}/hypershift
    BUILD_CMD="sudo make hypershift"
    sudo git clone --depth=1 git@github.com:openshift/hypershift.git ${WORKSPACE}/hypershift --branch main
    cd ${WORKSPACE}/hypershift
    echo "buid command is [${BUILD_CMD}]"
    eval "${BUILD_CMD}"
    sudo mv -f bin/hypershift $WORKDIR
    sudo rm -fr ../hypershift
    sudo chown -R cloud-user:cloud-user $WORKDIR
    hypershift -h
    cd $WORKDIR
else
    echo "skip get hypershift"
fi


#get opm client
if echo $INSTALL_TOOLS | grep -i 'opm' > /dev/null; then
    echo "------------------get opm------------------------"
    echo $KUBECONFIG
    if [[ "x${http_proxy_tmp}x" != "xx" ]] || [[ "x${https_proxy_tmp}x" != "xx" ]]; then
        echo "set env http_proxy https_proxy"
        export http_proxy=${http_proxy_tmp}
        export https_proxy=${https_proxy_tmp}
    fi
    oc extract secret/pull-secret -n openshift-config  --confirm
    if cat .dockerconfigjson | grep 'registry.ci.openshift.org' > /dev/null; then
        NIGHTLYVERSION=`oc get clusterversion | grep version | awk '{print $2}'`
        if [ ${NIGHTLYVERSION}"null" == "null" ]; then
            echo "get clusterversion failed"
            exit 1
        fi
        ocpimaage=`oc adm release info registry.ci.openshift.org/ocp/release:${NIGHTLYVERSION} --image-for=operator-registry -a .dockerconfigjson`
        echo ${ocpimaage}
        unset http_proxy https_proxy
        podman pull ${ocpimaage} --authfile  .dockerconfigjson
        rm -f .dockerconfigjson
        instanceID=`podman create ${ocpimaage}`
        podman cp ${instanceID}:/bin/opm  $WORKDIR
        podman cp ${instanceID}:/bin/initializer $WORKDIR
        podman cp ${instanceID}:/bin/configmap-server $WORKDIR
        podman cp ${instanceID}:/bin/registry-server $WORKDIR
        podman rm  -a
        podman rmi  -a
    fi
    if [ ! -f "$WORKDIR/opm" ]; then
        echo "get latest opm"
        unset http_proxy https_proxy
        NIGHTLYVERSIOM=${NIGHTLYFLAG:0:1}.${NIGHTLYFLAG:1:${#NIGHTLYFLAG}}
        curl -s -k https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp-dev-preview/latest-$NIGHTLYVERSIOM/opm-linux.tar.gz -o opm-linux.tar.gz
        tar -xzvf opm-linux.tar.gz
        echo "get opm-linux.tar.gz successfully"
        rm -f opm-linux.tar.gz
    fi
    echo "opm version:"
    opm version
    retVal=$?
    if [ $retVal -ne 0 ]; then
        echo "get opm failed"
        exit 1
    fi
fi

cp -f ~/.docker/auto/config.json ~/.docker
podman login quay.io 
cd $CURRENTDIR

if [ ! -f "/root/kustomize" ]; then
    echo "install kustomize"
    sudo wget "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"
    sudo chmod +x install_kustomize.sh
    sudo ./install_kustomize.sh 3.8.7 /root
fi

if [[ "x${http_proxy_tmp}x" != "xx" ]] || [[ "x${https_proxy_tmp}x" != "xx" ]]; then
    echo "set env http_proxy https_proxy"
    export http_proxy=${http_proxy_tmp}
    export https_proxy=${https_proxy_tmp}
fi
