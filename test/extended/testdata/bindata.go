// Code generated by go-bindata.
// sources:
// test/extended/testdata/bindata.go
// test/extended/testdata/olm/25782-catalogsource.yaml
// test/extended/testdata/olm/25782-operator.yaml
// test/extended/testdata/olm/catalogsource-address.yaml
// test/extended/testdata/olm/catalogsource-configmap.yaml
// test/extended/testdata/olm/catalogsource-image.yaml
// test/extended/testdata/olm/cm-certutil-readytest.yaml
// test/extended/testdata/olm/cm-certutil-readytests.yaml
// test/extended/testdata/olm/cm-learn-v1.yaml
// test/extended/testdata/olm/cm-learn-v2.yaml
// test/extended/testdata/olm/cm-lightbend.yaml
// test/extended/testdata/olm/cm-namespaceconfig.yaml
// test/extended/testdata/olm/configmap-test.yaml
// test/extended/testdata/olm/cs-without-image.yaml
// test/extended/testdata/olm/csc.yaml
// test/extended/testdata/olm/etcd-cluster.yaml
// test/extended/testdata/olm/etcd-custom-csc.yaml
// test/extended/testdata/olm/etcd-subscription-manual.yaml
// test/extended/testdata/olm/etcd-subscription.yaml
// test/extended/testdata/olm/image-catalogsource.yaml
// test/extended/testdata/olm/image-sub.yaml
// test/extended/testdata/olm/og-allns.yaml
// test/extended/testdata/olm/og-multins.yaml
// test/extended/testdata/olm/olm-subscription.yaml
// test/extended/testdata/olm/operatorgroup.yaml
// test/extended/testdata/olm/opsrc.yaml
// test/extended/testdata/operators/couchbase-enterprise-cr.yaml
// test/extended/testdata/operators/jaeger.yaml
// test/extended/testdata/operators/kafka.yaml
// test/extended/testdata/operators/keycloak-cr.yaml
// test/extended/testdata/operators/mongodb-ops-manager-cr.yaml
// test/extended/testdata/operators/mongodb-ops-manager-secret.yaml
// test/extended/testdata/operators/operator_group.yaml
// test/extended/testdata/operators/portworx-snode-cr.yaml
// test/extended/testdata/operators/spark-gcp-sparkapplication-cr.yaml
// test/extended/testdata/operators/strimzi-cr.yaml
// test/extended/testdata/operators/subscription.yaml
// DO NOT EDIT!

package testdata

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _testExtendedTestdataBindataGo = []byte(``)

func testExtendedTestdataBindataGoBytes() ([]byte, error) {
	return _testExtendedTestdataBindataGo, nil
}

func testExtendedTestdataBindataGo() (*asset, error) {
	bytes, err := testExtendedTestdataBindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/bindata.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testExtendedTestdataOlm25782CatalogsourceYaml = []byte(`apiVersion: operators.coreos.com/v1alpha1
kind: CatalogSource
metadata:
  name: installed-community-global-operators
  namespace: openshift-operators
spec:
  configMap: installed-community-global-operators
  displayName: Community Operators
  icon:
    base64data: ""
    mediatype: ""
  publisher: Community
  sourceType: internal`)

func testExtendedTestdataOlm25782CatalogsourceYamlBytes() ([]byte, error) {
	return _testExtendedTestdataOlm25782CatalogsourceYaml, nil
}

func testExtendedTestdataOlm25782CatalogsourceYaml() (*asset, error) {
	bytes, err := testExtendedTestdataOlm25782CatalogsourceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/olm/25782-catalogsource.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testExtendedTestdataOlm25782OperatorYaml = []byte(`apiVersion: v1
kind: Template
metadata:
  name: operator-template
objects:
- apiVersion: v1
  data:
    clusterServiceVersions: |
      - apiVersion: operators.coreos.com/v1alpha1
        kind: ClusterServiceVersion
        metadata:
          annotations:
            alm-examples: '[{"apiVersion":"etcd.database.coreos.com/v1beta2","kind":"EtcdCluster","metadata":{"name":"example","namespace":"default"},"spec":{"size":3,"version":"3.2.13"}},{"apiVersion":"etcd.database.coreos.com/v1beta2","kind":"EtcdRestore","metadata":{"name":"example-etcd-cluster"},"spec":{"etcdCluster":{"name":"example-etcd-cluster"},"backupStorageType":"S3","s3":{"path":"<full-s3-path>","awsSecret":"<aws-secret>"}}},{"apiVersion":"etcd.database.coreos.com/v1beta2","kind":"EtcdBackup","metadata":{"name":"example-etcd-cluster-backup"},"spec":{"etcdEndpoints":["<etcd-cluster-endpoints>"],"storageType":"S3","s3":{"path":"<full-s3-path>","awsSecret":"<aws-secret>"}}}]'
            tectonic-visibility: ocs
          creationTimestamp: null
          name: etcdoperator.v0.9.2
          namespace: "${NAMESPACE}"
        spec:
          customresourcedefinitions:
            owned:
            - description: Represents a cluster of etcd nodes.
              displayName: etcd Cluster
              kind: EtcdCluster
              name: etcdclusters.etcd.database.coreos.com
              resources:
              - kind: Service
                version: v1
              - kind: Pod
                version: v1
              specDescriptors:
              - description: The desired number of member Pods for the etcd cluster.
                displayName: Size
                path: size
                x-descriptors:
                - urn:alm:descriptor:com.tectonic.ui:podCount
              - description: Limits describes the minimum/maximum amount of compute resources
                  required/allowed
                displayName: Resource Requirements
                path: pod.resources
                x-descriptors:
                - urn:alm:descriptor:com.tectonic.ui:resourceRequirements
              statusDescriptors:
              - description: The status of each of the member Pods for the etcd cluster.
                displayName: Member Status
                path: members
                x-descriptors:
                - urn:alm:descriptor:com.tectonic.ui:podStatuses
              - description: The service at which the running etcd cluster can be accessed.
                displayName: Service
                path: serviceName
                x-descriptors:
                - urn:alm:descriptor:io.kubernetes:Service
              - description: The current size of the etcd cluster.
                displayName: Cluster Size
                path: size
              - description: The current version of the etcd cluster.
                displayName: Current Version
                path: currentVersion
              - description: The target version of the etcd cluster, after upgrading.
                displayName: Target Version
                path: targetVersion
              - description: The current status of the etcd cluster.
                displayName: Status
                path: phase
                x-descriptors:
                - urn:alm:descriptor:io.kubernetes.phase
              - description: Explanation for the current status of the cluster.
                displayName: Status Details
                path: reason
                x-descriptors:
                - urn:alm:descriptor:io.kubernetes.phase:reason
              version: v1beta2
            - description: Represents the intent to backup an etcd cluster.
              displayName: etcd Backup
              kind: EtcdBackup
              name: etcdbackups.etcd.database.coreos.com
              specDescriptors:
              - description: Specifies the endpoints of an etcd cluster.
                displayName: etcd Endpoint(s)
                path: etcdEndpoints
                x-descriptors:
                - urn:alm:descriptor:etcd:endpoint
              - description: The full AWS S3 path where the backup is saved.
                displayName: S3 Path
                path: s3.path
                x-descriptors:
                - urn:alm:descriptor:aws:s3:path
              - description: The name of the secret object that stores the AWS credential
                  and config files.
                displayName: AWS Secret
                path: s3.awsSecret
                x-descriptors:
                - urn:alm:descriptor:io.kubernetes:Secret
              statusDescriptors:
              - description: Indicates if the backup was successful.
                displayName: Succeeded
                path: succeeded
                x-descriptors:
                - urn:alm:descriptor:text
              - description: Indicates the reason for any backup related failures.
                displayName: Reason
                path: reason
                x-descriptors:
                - urn:alm:descriptor:io.kubernetes.phase:reason
              version: v1beta2
            - description: Represents the intent to restore an etcd cluster from a backup.
              displayName: etcd Restore
              kind: EtcdRestore
              name: etcdrestores.etcd.database.coreos.com
              specDescriptors:
              - description: References the EtcdCluster which should be restored,
                displayName: etcd Cluster
                path: etcdCluster.name
                x-descriptors:
                - urn:alm:descriptor:io.kubernetes:EtcdCluster
                - urn:alm:descriptor:text
              - description: The full AWS S3 path where the backup is saved.
                displayName: S3 Path
                path: s3.path
                x-descriptors:
                - urn:alm:descriptor:aws:s3:path
              - description: The name of the secret object that stores the AWS credential
                  and config files.
                displayName: AWS Secret
                path: s3.awsSecret
                x-descriptors:
                - urn:alm:descriptor:io.kubernetes:Secret
              statusDescriptors:
              - description: Indicates if the restore was successful.
                displayName: Succeeded
                path: succeeded
                x-descriptors:
                - urn:alm:descriptor:text
              - description: Indicates the reason for any restore related failures.
                displayName: Reason
                path: reason
                x-descriptors:
                - urn:alm:descriptor:io.kubernetes.phase:reason
              version: v1beta2
          minKubeVersion: a.b.1
          description: |
            etcd is a distributed key value store that provides a reliable way to store data across a cluster of machines. It’s open-source and available on GitHub. etcd gracefully handles leader elections during network partitions and will tolerate machine failure, including the leader. Your applications can read and write data into etcd.
            A simple use-case is to store database connection details or feature flags within etcd as key value pairs. These values can be watched, allowing your app to reconfigure itself when they change. Advanced uses take advantage of the consistency guarantees to implement database leader elections or do distributed locking across a cluster of workers.

            _The etcd Open Cloud Service is Public Alpha. The goal before Beta is to fully implement backup features._

            ### Reading and writing to etcd

            Communicate with etcd though its command line utility ` + "`" + `etcdctl` + "`" + ` or with the API using the automatically generated Kubernetes Service.

            [Read the complete guide to using the etcd Open Cloud Service](https://coreos.com/tectonic/docs/latest/alm/etcd-ocs.html)

            ### Supported Features


            **High availability**


            Multiple instances of etcd are networked together and secured. Individual failures or networking issues are transparently handled to keep your cluster up and running.


            **Automated updates**


            Rolling out a new etcd version works like all Kubernetes rolling updates. Simply declare the desired version, and the etcd service starts a safe rolling update to the new version automatically.


            **Backups included**


            Coming soon, the ability to schedule backups to happen on or off cluster.
          displayName: etcd
          icon:
          - base64data: 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
            mediatype: image/png
          install:
            spec:
              deployments:
              - name: etcd-operator
                spec:
                  replicas: 1
                  selector:
                    matchLabels:
                      name: etcd-operator-alm-owned
                  template:
                    metadata:
                      labels:
                        name: etcd-operator-alm-owned
                      name: etcd-operator-alm-owned
                    spec:
                      containers:
                      - command:
                        - etcd-operator
                        - --create-crd=false
                        env:
                        - name: MY_POD_NAMESPACE
                          valueFrom:
                            fieldRef:
                              fieldPath: metadata.namespace
                        - name: MY_POD_NAME
                          valueFrom:
                            fieldRef:
                              fieldPath: metadata.name
                        image: quay.io/coreos/etcd-operator@sha256:c0301e4686c3ed4206e370b42de5a3bd2229b9fb4906cf85f3f30650424abec2
                        name: etcd-operator
                      - command:
                        - etcd-backup-operator
                        - --create-crd=false
                        env:
                        - name: MY_POD_NAMESPACE
                          valueFrom:
                            fieldRef:
                              fieldPath: metadata.namespace
                        - name: MY_POD_NAME
                          valueFrom:
                            fieldRef:
                              fieldPath: metadata.name
                        image: quay.io/coreos/etcd-operator@sha256:c0301e4686c3ed4206e370b42de5a3bd2229b9fb4906cf85f3f30650424abec2
                        name: etcd-backup-operator
                      - command:
                        - etcd-restore-operator
                        - --create-crd=false
                        env:
                        - name: MY_POD_NAMESPACE
                          valueFrom:
                            fieldRef:
                              fieldPath: metadata.namespace
                        - name: MY_POD_NAME
                          valueFrom:
                            fieldRef:
                              fieldPath: metadata.name
                        image: quay.io/coreos/etcd-operator@sha256:c0301e4686c3ed4206e370b42de5a3bd2229b9fb4906cf85f3f30650424abec2
                        name: etcd-restore-operator
                      serviceAccountName: etcd-operator
              permissions:
              - rules:
                - apiGroups:
                  - etcd.database.coreos.com
                  resources:
                  - etcdclusters
                  - etcdbackups
                  - etcdrestores
                  verbs:
                  - '*'
                - apiGroups:
                  - ""
                  resources:
                  - pods
                  - services
                  - endpoints
                  - persistentvolumeclaims
                  - events
                  verbs:
                  - '*'
                - apiGroups:
                  - apps
                  resources:
                  - deployments
                  verbs:
                  - '*'
                - apiGroups:
                  - ""
                  resources:
                  - secrets
                  verbs:
                  - get
                serviceAccountName: etcd-operator
            strategy: deployment
          installModes:
          - supported: true
            type: OwnNamespace
          - supported: true
            type: SingleNamespace
          - supported: false
            type: MultiNamespace
          - supported: true
            type: AllNamespaces
          keywords:
          - etcd
          - key value
          - database
          - coreos
          - open source
          labels:
            alm-owner-etcd: etcdoperator
            operated-by: etcdoperator
          links:
          - name: Blog
            url: https://coreos.com/etcd
          - name: Documentation
            url: https://coreos.com/operators/etcd/docs/latest/
          - name: etcd Operator Source Code
            url: https://github.com/coreos/etcd-operator
          maintainers:
          - email: support@coreos.com
            name: CoreOS, Inc
          maturity: alpha
          provider:
            name: CoreOS, Inc
          replaces: etcdoperator.v0.9.0
          selector:
            matchLabels:
              alm-owner-etcd: etcdoperator
              operated-by: etcdoperator
          version: 0.9.2
      - apiVersion: operators.coreos.com/v1alpha1
        kind: ClusterServiceVersion
        metadata:
          annotations:
            alm-examples: '[{"apiVersion":"etcd.database.coreos.com/v1beta2","kind":"EtcdCluster","metadata":{"name":"example","namespace":"default"},"spec":{"size":3,"version":"3.2.13"}},{"apiVersion":"etcd.database.coreos.com/v1beta2","kind":"EtcdRestore","metadata":{"name":"example-etcd-cluster"},"spec":{"etcdCluster":{"name":"example-etcd-cluster"},"backupStorageType":"S3","s3":{"path":"<full-s3-path>","awsSecret":"<aws-secret>"}}},{"apiVersion":"etcd.database.coreos.com/v1beta2","kind":"EtcdBackup","metadata":{"name":"example-etcd-cluster-backup"},"spec":{"etcdEndpoints":["<etcd-cluster-endpoints>"],"storageType":"S3","s3":{"path":"<full-s3-path>","awsSecret":"<aws-secret>"}}}]'
            tectonic-visibility: ocs
          creationTimestamp: null
          name: etcdoperator.v0.9.0
          namespace: "${NAMESPACE}"
        spec:
          customresourcedefinitions:
            owned:
            - description: Represents a cluster of etcd nodes.
              displayName: etcd Cluster
              kind: EtcdCluster
              name: etcdclusters.etcd.database.coreos.com
              resources:
              - kind: Service
                version: v1
              - kind: Pod
                version: v1
              specDescriptors:
              - description: The desired number of member Pods for the etcd cluster.
                displayName: Size
                path: size
                x-descriptors:
                - urn:alm:descriptor:com.tectonic.ui:podCount
              - description: Limits describes the minimum/maximum amount of compute resources
                  required/allowed
                displayName: Resource Requirements
                path: pod.resources
                x-descriptors:
                - urn:alm:descriptor:com.tectonic.ui:resourceRequirements
              statusDescriptors:
              - description: The status of each of the member Pods for the etcd cluster.
                displayName: Member Status
                path: members
                x-descriptors:
                - urn:alm:descriptor:com.tectonic.ui:podStatuses
              - description: The service at which the running etcd cluster can be accessed.
                displayName: Service
                path: serviceName
                x-descriptors:
                - urn:alm:descriptor:io.kubernetes:Service
              - description: The current size of the etcd cluster.
                displayName: Cluster Size
                path: size
              - description: The current version of the etcd cluster.
                displayName: Current Version
                path: currentVersion
              - description: The target version of the etcd cluster, after upgrading.
                displayName: Target Version
                path: targetVersion
              - description: The current status of the etcd cluster.
                displayName: Status
                path: phase
                x-descriptors:
                - urn:alm:descriptor:io.kubernetes.phase
              - description: Explanation for the current status of the cluster.
                displayName: Status Details
                path: reason
                x-descriptors:
                - urn:alm:descriptor:io.kubernetes.phase:reason
              version: v1beta2
            - description: Represents the intent to backup an etcd cluster.
              displayName: etcd Backup
              kind: EtcdBackup
              name: etcdbackups.etcd.database.coreos.com
              specDescriptors:
              - description: Specifies the endpoints of an etcd cluster.
                displayName: etcd Endpoint(s)
                path: etcdEndpoints
                x-descriptors:
                - urn:alm:descriptor:etcd:endpoint
              - description: The full AWS S3 path where the backup is saved.
                displayName: S3 Path
                path: s3.path
                x-descriptors:
                - urn:alm:descriptor:aws:s3:path
              - description: The name of the secret object that stores the AWS credential
                  and config files.
                displayName: AWS Secret
                path: s3.awsSecret
                x-descriptors:
                - urn:alm:descriptor:io.kubernetes:Secret
              statusDescriptors:
              - description: Indicates if the backup was successful.
                displayName: Succeeded
                path: succeeded
                x-descriptors:
                - urn:alm:descriptor:text
              - description: Indicates the reason for any backup related failures.
                displayName: Reason
                path: reason
                x-descriptors:
                - urn:alm:descriptor:io.kubernetes.phase:reason
              version: v1beta2
            - description: Represents the intent to restore an etcd cluster from a backup.
              displayName: etcd Restore
              kind: EtcdRestore
              name: etcdrestores.etcd.database.coreos.com
              specDescriptors:
              - description: References the EtcdCluster which should be restored,
                displayName: etcd Cluster
                path: etcdCluster.name
                x-descriptors:
                - urn:alm:descriptor:io.kubernetes:EtcdCluster
                - urn:alm:descriptor:text
              - description: The full AWS S3 path where the backup is saved.
                displayName: S3 Path
                path: s3.path
                x-descriptors:
                - urn:alm:descriptor:aws:s3:path
              - description: The name of the secret object that stores the AWS credential
                  and config files.
                displayName: AWS Secret
                path: s3.awsSecret
                x-descriptors:
                - urn:alm:descriptor:io.kubernetes:Secret
              statusDescriptors:
              - description: Indicates if the restore was successful.
                displayName: Succeeded
                path: succeeded
                x-descriptors:
                - urn:alm:descriptor:text
              - description: Indicates the reason for any restore related failures.
                displayName: Reason
                path: reason
                x-descriptors:
                - urn:alm:descriptor:io.kubernetes.phase:reason
              version: v1beta2
          description: |
            etcd is a distributed key value store that provides a reliable way to store data across a cluster of machines. It’s open-source and available on GitHub. etcd gracefully handles leader elections during network partitions and will tolerate machine failure, including the leader. Your applications can read and write data into etcd.
            A simple use-case is to store database connection details or feature flags within etcd as key value pairs. These values can be watched, allowing your app to reconfigure itself when they change. Advanced uses take advantage of the consistency guarantees to implement database leader elections or do distributed locking across a cluster of workers.

            _The etcd Open Cloud Service is Public Alpha. The goal before Beta is to fully implement backup features._

            ### Reading and writing to etcd

            Communicate with etcd though its command line utility ` + "`" + `etcdctl` + "`" + ` or with the API using the automatically generated Kubernetes Service.

            [Read the complete guide to using the etcd Open Cloud Service](https://coreos.com/tectonic/docs/latest/alm/etcd-ocs.html)

            ### Supported Features


            **High availability**


            Multiple instances of etcd are networked together and secured. Individual failures or networking issues are transparently handled to keep your cluster up and running.


            **Automated updates**


            Rolling out a new etcd version works like all Kubernetes rolling updates. Simply declare the desired version, and the etcd service starts a safe rolling update to the new version automatically.


            **Backups included**


            Coming soon, the ability to schedule backups to happen on or off cluster.
          displayName: etcd
          icon:
          - base64data: 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
            mediatype: image/png
          install:
            spec:
              deployments:
              - name: etcd-operator
                spec:
                  replicas: 1
                  selector:
                    matchLabels:
                      name: etcd-operator-alm-owned
                  template:
                    metadata:
                      labels:
                        name: etcd-operator-alm-owned
                      name: etcd-operator-alm-owned
                    spec:
                      containers:
                      - command:
                        - etcd-operator
                        - --create-crd=false
                        env:
                        - name: MY_POD_NAMESPACE
                          valueFrom:
                            fieldRef:
                              fieldPath: metadata.namespace
                        - name: MY_POD_NAME
                          valueFrom:
                            fieldRef:
                              fieldPath: metadata.name
                        image: quay.io/coreos/etcd-operator@sha256:db563baa8194fcfe39d1df744ed70024b0f1f9e9b55b5923c2f3a413c44dc6b8
                        name: etcd-operator
                      - command:
                        - etcd-backup-operator
                        - --create-crd=false
                        env:
                        - name: MY_POD_NAMESPACE
                          valueFrom:
                            fieldRef:
                              fieldPath: metadata.namespace
                        - name: MY_POD_NAME
                          valueFrom:
                            fieldRef:
                              fieldPath: metadata.name
                        image: quay.io/coreos/etcd-operator@sha256:db563baa8194fcfe39d1df744ed70024b0f1f9e9b55b5923c2f3a413c44dc6b8
                        name: etcd-backup-operator
                      - command:
                        - etcd-restore-operator
                        - --create-crd=false
                        env:
                        - name: MY_POD_NAMESPACE
                          valueFrom:
                            fieldRef:
                              fieldPath: metadata.namespace
                        - name: MY_POD_NAME
                          valueFrom:
                            fieldRef:
                              fieldPath: metadata.name
                        image: quay.io/coreos/etcd-operator@sha256:db563baa8194fcfe39d1df744ed70024b0f1f9e9b55b5923c2f3a413c44dc6b8
                        name: etcd-restore-operator
                      serviceAccountName: etcd-operator
              permissions:
              - rules:
                - apiGroups:
                  - etcd.database.coreos.com
                  resources:
                  - etcdclusters
                  - etcdbackups
                  - etcdrestores
                  verbs:
                  - '*'
                - apiGroups:
                  - ""
                  resources:
                  - pods
                  - services
                  - endpoints
                  - persistentvolumeclaims
                  - events
                  verbs:
                  - '*'
                - apiGroups:
                  - apps
                  resources:
                  - deployments
                  verbs:
                  - '*'
                - apiGroups:
                  - ""
                  resources:
                  - secrets
                  verbs:
                  - get
                serviceAccountName: etcd-operator
            strategy: deployment
          installModes:
          - supported: true
            type: OwnNamespace
          - supported: true
            type: SingleNamespace
          - supported: false
            type: MultiNamespace
          - supported: true
            type: AllNamespaces
          keywords:
          - etcd
          - key value
          - database
          - coreos
          - open source
          labels:
            alm-owner-etcd: etcdoperator
            operated-by: etcdoperator
          links:
          - name: Blog
            url: https://coreos.com/etcd
          - name: Documentation
            url: https://coreos.com/operators/etcd/docs/latest/
          - name: etcd Operator Source Code
            url: https://github.com/coreos/etcd-operator
          maintainers:
          - email: support@coreos.com
            name: CoreOS, Inc
          maturity: alpha
          provider:
            name: CoreOS, Inc
          replaces: etcdoperator.v0.6.1
          selector:
            matchLabels:
              alm-owner-etcd: etcdoperator
              operated-by: etcdoperator
          version: 0.9.0
      - apiVersion: operators.coreos.com/v1alpha1
        kind: ClusterServiceVersion
        metadata:
          annotations:
            tectonic-visibility: ocs
          creationTimestamp: null
          name: etcdoperator.v0.6.1
          namespace: "${NAMESPACE}"
        spec:
          customresourcedefinitions:
            owned:
            - description: Represents a cluster of etcd nodes.
              displayName: etcd Cluster
              kind: EtcdCluster
              name: etcdclusters.etcd.database.coreos.com
              resources:
              - kind: Service
                version: v1
              - kind: Pod
                version: v1
              specDescriptors:
              - description: The desired number of member Pods for the etcd cluster.
                displayName: Size
                path: size
                x-descriptors:
                - urn:alm:descriptor:com.tectonic.ui:podCount
              statusDescriptors:
              - description: The status of each of the member Pods for the etcd cluster.
                displayName: Member Status
                path: members
                x-descriptors:
                - urn:alm:descriptor:com.tectonic.ui:podStatuses
              - description: The service at which the running etcd cluster can be accessed.
                displayName: Service
                path: service
                x-descriptors:
                - urn:alm:descriptor:io.kubernetes:Service
              - description: The current size of the etcd cluster.
                displayName: Cluster Size
                path: size
              - description: The current version of the etcd cluster.
                displayName: Current Version
                path: currentVersion
              - description: The target version of the etcd cluster, after upgrading.
                displayName: Target Version
                path: targetVersion
              - description: The current status of the etcd cluster.
                displayName: Status
                path: phase
                x-descriptors:
                - urn:alm:descriptor:io.kubernetes.phase
              - description: Explanation for the current status of the cluster.
                displayName: Status Details
                path: reason
                x-descriptors:
                - urn:alm:descriptor:io.kubernetes.phase:reason
              version: v1beta2
          description: |
            etcd is a distributed key value store that provides a reliable way to store data across a cluster of machines. It’s open-source and available on GitHub. etcd gracefully handles leader elections during network partitions and will tolerate machine failure, including the leader. Your applications can read and write data into etcd.
            A simple use-case is to store database connection details or feature flags within etcd as key value pairs. These values can be watched, allowing your app to reconfigure itself when they change. Advanced uses take advantage of the consistency guarantees to implement database leader elections or do distributed locking across a cluster of workers.

            _The etcd Open Cloud Service is Public Alpha. The goal before Beta is to fully implement backup features._

            ### Reading and writing to etcd

            Communicate with etcd though its command line utility ` + "`" + `etcdctl` + "`" + ` or with the API using the automatically generated Kubernetes Service.

            [Read the complete guide to using the etcd Open Cloud Service](https://coreos.com/tectonic/docs/latest/alm/etcd-ocs.html)

            ### Supported Features
            **High availability**
            Multiple instances of etcd are networked together and secured. Individual failures or networking issues are transparently handled to keep your cluster up and running.
            **Automated updates**
            Rolling out a new etcd version works like all Kubernetes rolling updates. Simply declare the desired version, and the etcd service starts a safe rolling update to the new version automatically.
            **Backups included**
            Coming soon, the ability to schedule backups to happen on or off cluster.
          displayName: etcd
          icon:
          - base64data: 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
            mediatype: image/png
          install:
            spec:
              deployments:
              - name: etcd-operator
                spec:
                  replicas: 1
                  selector:
                    matchLabels:
                      name: etcd-operator-alm-owned
                  template:
                    metadata:
                      labels:
                        name: etcd-operator-alm-owned
                      name: etcd-operator-alm-owned
                    spec:
                      containers:
                      - command:
                        - etcd-operator
                        - --create-crd=false
                        env:
                        - name: MY_POD_NAMESPACE
                          valueFrom:
                            fieldRef:
                              fieldPath: metadata.namespace
                        - name: MY_POD_NAME
                          valueFrom:
                            fieldRef:
                              fieldPath: metadata.name
                        image: quay.io/coreos/etcd-operator@sha256:bd944a211eaf8f31da5e6d69e8541e7cada8f16a9f7a5a570b22478997819943
                        name: etcd-operator
                      serviceAccountName: etcd-operator
              permissions:
              - rules:
                - apiGroups:
                  - etcd.database.coreos.com
                  resources:
                  - etcdclusters
                  verbs:
                  - '*'
                - apiGroups:
                  - storage.k8s.io
                  resources:
                  - storageclasses
                  verbs:
                  - '*'
                - apiGroups:
                  - ""
                  resources:
                  - pods
                  - services
                  - endpoints
                  - persistentvolumeclaims
                  - events
                  verbs:
                  - '*'
                - apiGroups:
                  - apps
                  resources:
                  - deployments
                  verbs:
                  - '*'
                - apiGroups:
                  - ""
                  resources:
                  - secrets
                  verbs:
                  - get
                serviceAccountName: etcd-operator
            strategy: deployment
          installModes:
          - supported: true
            type: OwnNamespace
          - supported: true
            type: SingleNamespace
          - supported: false
            type: MultiNamespace
          - supported: true
            type: AllNamespaces
          keywords:
          - etcd
          - key value
          - database
          - coreos
          - open source
          labels:
            alm-owner-etcd: etcdoperator
            alm-status-descriptors: etcdoperator.v0.6.1
            operated-by: etcdoperator
          links:
          - name: Blog
            url: https://coreos.com/etcd
          - name: Documentation
            url: https://coreos.com/operators/etcd/docs/latest/
          - name: etcd Operator Source Code
            url: https://github.com/coreos/etcd-operator
          maintainers:
          - email: support@coreos.com
            name: CoreOS, Inc
          maturity: alpha
          provider:
            name: CoreOS, Inc
          selector:
            matchLabels:
              alm-owner-etcd: etcdoperator
              operated-by: etcdoperator
          version: 0.6.1
    customResourceDefinitions: |
      - apiVersion: apiextensions.k8s.io/v1beta1
        kind: CustomResourceDefinition
        metadata:
          creationTimestamp: null
          name: etcdclusters.etcd.database.coreos.com
        spec:
          group: etcd.database.coreos.com
          names:
            kind: EtcdCluster
            listKind: EtcdClusterList
            plural: etcdclusters
            shortNames:
            - etcdclus
            - etcd
            singular: etcdcluster
          scope: Namespaced
          version: v1beta2
        status:
          acceptedNames:
            kind: ""
            plural: ""
          conditions: null
          storedVersions: null
      - apiVersion: apiextensions.k8s.io/v1beta1
        kind: CustomResourceDefinition
        metadata:
          creationTimestamp: null
          name: etcdbackups.etcd.database.coreos.com
        spec:
          group: etcd.database.coreos.com
          names:
            kind: EtcdBackup
            listKind: EtcdBackupList
            plural: etcdbackups
            singular: etcdbackup
          scope: Namespaced
          version: v1beta2
        status:
          acceptedNames:
            kind: ""
            plural: ""
          conditions: null
          storedVersions: null
      - apiVersion: apiextensions.k8s.io/v1beta1
        kind: CustomResourceDefinition
        metadata:
          creationTimestamp: null
          name: etcdrestores.etcd.database.coreos.com
        spec:
          group: etcd.database.coreos.com
          names:
            kind: EtcdRestore
            listKind: EtcdRestoreList
            plural: etcdrestores
            singular: etcdrestore
          scope: Namespaced
          version: v1beta2
        status:
          acceptedNames:
            kind: ""
            plural: ""
          conditions: null
          storedVersions: null
    packages: |
      - channels:
        - currentCSV: "${BADCSV}"
          name: alpha
        defaultChannel: ""
        packageName: etcd
  kind: ConfigMap
  metadata:
    name: installed-community-global-operators
    namespace: openshift-operators
parameters:
- name: NAME
- name: NAMESPACE
- name: BADCSV`)

func testExtendedTestdataOlm25782OperatorYamlBytes() ([]byte, error) {
	return _testExtendedTestdataOlm25782OperatorYaml, nil
}

func testExtendedTestdataOlm25782OperatorYaml() (*asset, error) {
	bytes, err := testExtendedTestdataOlm25782OperatorYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/olm/25782-operator.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testExtendedTestdataOlmCatalogsourceAddressYaml = []byte(`apiVersion: v1
kind: Template
metadata:
  name: catalogsource-template
objects:
- apiVersion: operators.coreos.com/v1alpha1
  kind: CatalogSource
  metadata:
    name: "${NAME}"
    namespace: "${NAMESPACE}"
  spec:
    address: "${ADDRESS}"
    displayName: "${DISPLAYNAME}"
    icon:
      base64data: ""
      mediatype: ""
    publisher: "${PUBLISHER}"
    sourceType: "${SOURCETYPE}"
parameters:
- name: NAME
- name: NAMESPACE
- name: ADDRESS
- name: DISPLAYNAME
- name: PUBLISHER
- name: SOURCETYPE
`)

func testExtendedTestdataOlmCatalogsourceAddressYamlBytes() ([]byte, error) {
	return _testExtendedTestdataOlmCatalogsourceAddressYaml, nil
}

func testExtendedTestdataOlmCatalogsourceAddressYaml() (*asset, error) {
	bytes, err := testExtendedTestdataOlmCatalogsourceAddressYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/olm/catalogsource-address.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testExtendedTestdataOlmCatalogsourceConfigmapYaml = []byte(`apiVersion: v1
kind: Template
metadata:
  name: catalogsource-template
objects:
- apiVersion: operators.coreos.com/v1alpha1
  kind: CatalogSource
  metadata:
    name: "${NAME}"
    namespace: "${NAMESPACE}"
  spec:
    configMap: "${ADDRESS}"
    displayName: "${DISPLAYNAME}"
    icon:
      base64data: ""
      mediatype: ""
    publisher: "${PUBLISHER}"
    sourceType: "${SOURCETYPE}"
parameters:
- name: NAME
- name: NAMESPACE
- name: ADDRESS
- name: DISPLAYNAME
- name: PUBLISHER
- name: SOURCETYPE
`)

func testExtendedTestdataOlmCatalogsourceConfigmapYamlBytes() ([]byte, error) {
	return _testExtendedTestdataOlmCatalogsourceConfigmapYaml, nil
}

func testExtendedTestdataOlmCatalogsourceConfigmapYaml() (*asset, error) {
	bytes, err := testExtendedTestdataOlmCatalogsourceConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/olm/catalogsource-configmap.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testExtendedTestdataOlmCatalogsourceImageYaml = []byte(`apiVersion: v1
kind: Template
metadata:
  name: catalogsource-image-template
objects:
- apiVersion: operators.coreos.com/v1alpha1
  kind: CatalogSource
  metadata:
    name: "${NAME}"
    namespace: "${NAMESPACE}"
  spec:
    image: "${ADDRESS}"
    displayName: "${DISPLAYNAME}"
    icon:
      base64data: ""
      mediatype: ""
    publisher: "${PUBLISHER}"
    sourceType: "${SOURCETYPE}"
    updateStrategy:
      registryPoll:
        interval: 10m0s
parameters:
- name: NAME
- name: NAMESPACE
- name: ADDRESS
- name: DISPLAYNAME
- name: PUBLISHER
- name: SOURCETYPE
`)

func testExtendedTestdataOlmCatalogsourceImageYamlBytes() ([]byte, error) {
	return _testExtendedTestdataOlmCatalogsourceImageYaml, nil
}

func testExtendedTestdataOlmCatalogsourceImageYaml() (*asset, error) {
	bytes, err := testExtendedTestdataOlmCatalogsourceImageYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/olm/catalogsource-image.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testExtendedTestdataOlmCmCertutilReadytestYaml = []byte(`apiVersion: v1
kind: Template
metadata:
  name: cm-cert-readytest-template
objects:
- apiVersion: v1
  data:
    clusterServiceVersions: |
      - apiVersion: operators.coreos.com/v1alpha1
        kind: ClusterServiceVersion
        metadata:
          annotations:
            alm-examples: '[]
              '
            capabilities: Full Lifecycle
            categories: Security
            certified: 'false'
            containerImage: quay.io/redhat-cop/cert-utils-operator:latest
            createdAt: 5/26/2019
            description: Set of utilities for TLS certificates
            repository: https://github.com/redhat-cop/cert-utils-operator
            support: Best Effort
          name: cert-utils-operator.v0.0.3
          namespace: cert-utils-operator
        spec:
          apiservicedefinitions: {}
          customresourcedefinitions:
            owned:
            - description: ReadyTest
              displayName: readytest
              group: stable.example.com
              kind: ReadyTest
              name: readytest.stable.example.com
              version: v1
          description: 'Cert utils operator is a set of functionalities around certificates
            packaged in a [Kubernetes operator](https://github.com/operator-framework/operator-sdk).
            Certificates are assumed to be available in a [secret](https://kubernetes.io/docs/concepts/configuration/secret/)
            of type ` + "`" + `kubernetes.io/tls` + "`" + ` (other types of secrets are *ignored* by this operator).
            By convention this type of secrets have three optional entries:
            1. ` + "`" + `tls.key` + "`" + `: the private key of the certificate.
            2. ` + "`" + `tls.crt` + "`" + `: the actual certificate.
            3. ` + "`" + `ca.crt` + "`" + `: the CA bundle that validates the certificate.
            The functionalities are the following:
            1. [Ability to populate route certificates](https://github.com/redhat-cop/cert-utils-operator#Populating-route-certificates)
            2. [Ability to create java keystore and truststore from the certificates](https://github.com/redhat-cop/cert-utils-operator#Creating-java-keystore-and-truststore)
            3. [Ability to show info regarding the certificates](https://github.com/redhat-cop/cert-utils-operator#Showing-info-on-the-certificates)
            4. [Ability to alert when a certificate is about to expire](https://github.com/redhat-cop/cert-utils-operator#Alerting-when-a-certificate-is-about-to-expire)
            5. [Ability to inject ca bundles in ValidatingWebhookConfiguration, MutatingWebhookConfiguration,
            CustomResourceDefinition object](https://github.com/redhat-cop/cert-utils-operator#CA-injection)
            All these feature are activated via opt-in annotations.
            '
          displayName: Cert Utils Operator
          icon:
          - base64data: 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
            mediatype: image/png
          install:
            spec:
              clusterPermissions:
              - rules:
                - apiGroups:
                  - ''
                  resources:
                  - events
                  - secrets
                  verbs:
                  - '*'
                - apiGroups:
                  - route.openshift.io
                  resources:
                  - '*'
                  verbs:
                  - '*'
                - apiGroups:
                  - admissionregistration.k8s.io
                  resources:
                  - validatingwebhookconfigurations
                  - mutatingwebhookconfigurations
                  verbs:
                  - '*'
                - apiGroups:
                  - apiextensions.k8s.io
                  resources:
                  - customresourcedefinitions
                  verbs:
                  - '*'
                serviceAccountName: cert-utils-operator
              deployments:
              - name: cert-utils-operator
                spec:
                  replicas: 1
                  selector:
                    matchLabels:
                      name: cert-utils-operator
                  strategy: {}
                  template:
                    metadata:
                      labels:
                        name: cert-utils-operator
                    spec:
                      containers:
                      - command:
                        - cert-utils-operator
                        env:
                        - name: WATCH_NAMESPACE
                          valueFrom:
                            fieldRef:
                              fieldPath: metadata.annotations['olm.targetNamespaces']
                        - name: POD_NAME
                          valueFrom:
                            fieldRef:
                              fieldPath: metadata.name
                        - name: OPERATOR_NAME
                          value: cert-utils-operator
                        image: quay.io/redhat-cop/cert-utils-operator:v0.0.3
                        imagePullPolicy: Always
                        name: cert-utils-operator
                        resources: {}
                      serviceAccountName: cert-utils-operator
              permissions:
              - rules:
                - apiGroups:
                  - ''
                  resources:
                  - configmaps
                  - pods
                  verbs:
                  - '*'
                - apiGroups:
                  - ''
                  resources:
                  - services
                  verbs:
                  - '*'
                - apiGroups:
                  - apps
                  resources:
                  - replicasets
                  - deployments
                  verbs:
                  - get
                  - list
                - apiGroups:
                  - monitoring.coreos.com
                  resources:
                  - servicemonitors
                  verbs:
                  - get
                  - create
                - apiGroups:
                  - apps
                  resourceNames:
                  - cert-utils-operator
                  resources:
                  - deployments/finalizers
                  verbs:
                  - update
                serviceAccountName: cert-utils-operator
            strategy: deployment
          installModes:
          - supported: true
            type: OwnNamespace
          - supported: true
            type: SingleNamespace
          - supported: false
            type: MultiNamespace
          - supported: false
            type: AllNamespaces
          keywords:
          - TLS
          - secrets
          - security
          - certificates
          links:
          - name: repository
            url: https://github.com/redhat-cop/cert-utils-operator
          - name: conatinerImage
            url: https://quay.io/redhat-cop/cert-utils-operator:latest
          maintainers:
          - email: rspazzol@redhat.com
            name: Raffaele Spazzoli
          maturity: alpha
          provider:
            name: Containers & PaaS CoP
          version: 0.0.3
    customResourceDefinitions: |
      - apiVersion: apiextensions.k8s.io/v1beta1
        kind: CustomResourceDefinition
        metadata:
          name: readytest.stable.example.com
        spec:
          group: stable.example.com
          versions:
            - name: v1
              served: true
              storage: true
          scope: Namespaced
          names:
            plural: readytests
            singular: readytest
            kind: ReadyTest
            shortNames:
            - rt
    packages: |
      - channels:
        - currentCSV: cert-utils-operator.v0.0.3
          name: alpha
        defaultChannel: alpha
        packageName: cert-utils-operator
  kind: ConfigMap
  metadata:
    name: "${NAME}"
    namespace: "${NAMESPACE}"
parameters:
- name: NAME
- name: NAMESPACE

`)

func testExtendedTestdataOlmCmCertutilReadytestYamlBytes() ([]byte, error) {
	return _testExtendedTestdataOlmCmCertutilReadytestYaml, nil
}

func testExtendedTestdataOlmCmCertutilReadytestYaml() (*asset, error) {
	bytes, err := testExtendedTestdataOlmCmCertutilReadytestYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/olm/cm-certutil-readytest.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testExtendedTestdataOlmCmCertutilReadytestsYaml = []byte(`apiVersion: v1
kind: Template
metadata:
  name: cm-cert-readytests-template
objects:
- apiVersion: v1
  data:
    clusterServiceVersions: |
      - apiVersion: operators.coreos.com/v1alpha1
        kind: ClusterServiceVersion
        metadata:
          annotations:
            alm-examples: '[]
              '
            capabilities: Full Lifecycle
            categories: Security
            certified: 'false'
            containerImage: quay.io/redhat-cop/cert-utils-operator:latest
            createdAt: 5/26/2019
            description: Set of utilities for TLS certificates
            repository: https://github.com/redhat-cop/cert-utils-operator
            support: Best Effort
          name: cert-utils-operator.v0.0.3
          namespace: cert-utils-operator
        spec:
          apiservicedefinitions: {}
          customresourcedefinitions:
            owned:
            - description: ReadyTest
              displayName: readytest
              group: stable.example.com
              kind: ReadyTest
              name: readytests.stable.example.com
              version: v1
          description: 'Cert utils operator is a set of functionalities around certificates
            packaged in a [Kubernetes operator](https://github.com/operator-framework/operator-sdk).
            Certificates are assumed to be available in a [secret](https://kubernetes.io/docs/concepts/configuration/secret/)
            of type ` + "`" + `kubernetes.io/tls` + "`" + ` (other types of secrets are *ignored* by this operator).
            By convention this type of secrets have three optional entries:
            1. ` + "`" + `tls.key` + "`" + `: the private key of the certificate.
            2. ` + "`" + `tls.crt` + "`" + `: the actual certificate.
            3. ` + "`" + `ca.crt` + "`" + `: the CA bundle that validates the certificate.
            The functionalities are the following:
            1. [Ability to populate route certificates](https://github.com/redhat-cop/cert-utils-operator#Populating-route-certificates)
            2. [Ability to create java keystore and truststore from the certificates](https://github.com/redhat-cop/cert-utils-operator#Creating-java-keystore-and-truststore)
            3. [Ability to show info regarding the certificates](https://github.com/redhat-cop/cert-utils-operator#Showing-info-on-the-certificates)
            4. [Ability to alert when a certificate is about to expire](https://github.com/redhat-cop/cert-utils-operator#Alerting-when-a-certificate-is-about-to-expire)
            5. [Ability to inject ca bundles in ValidatingWebhookConfiguration, MutatingWebhookConfiguration,
            CustomResourceDefinition object](https://github.com/redhat-cop/cert-utils-operator#CA-injection)
            All these feature are activated via opt-in annotations.
            '
          displayName: Cert Utils Operator
          icon:
          - base64data: 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
            mediatype: image/png
          install:
            spec:
              clusterPermissions:
              - rules:
                - apiGroups:
                  - ''
                  resources:
                  - events
                  - secrets
                  verbs:
                  - '*'
                - apiGroups:
                  - route.openshift.io
                  resources:
                  - '*'
                  verbs:
                  - '*'
                - apiGroups:
                  - admissionregistration.k8s.io
                  resources:
                  - validatingwebhookconfigurations
                  - mutatingwebhookconfigurations
                  verbs:
                  - '*'
                - apiGroups:
                  - apiextensions.k8s.io
                  resources:
                  - customresourcedefinitions
                  verbs:
                  - '*'
                serviceAccountName: cert-utils-operator
              deployments:
              - name: cert-utils-operator
                spec:
                  replicas: 1
                  selector:
                    matchLabels:
                      name: cert-utils-operator
                  strategy: {}
                  template:
                    metadata:
                      labels:
                        name: cert-utils-operator
                    spec:
                      containers:
                      - command:
                        - cert-utils-operator
                        env:
                        - name: WATCH_NAMESPACE
                          valueFrom:
                            fieldRef:
                              fieldPath: metadata.annotations['olm.targetNamespaces']
                        - name: POD_NAME
                          valueFrom:
                            fieldRef:
                              fieldPath: metadata.name
                        - name: OPERATOR_NAME
                          value: cert-utils-operator
                        image: quay.io/redhat-cop/cert-utils-operator:v0.0.3
                        imagePullPolicy: Always
                        name: cert-utils-operator
                        resources: {}
                      serviceAccountName: cert-utils-operator
              permissions:
              - rules:
                - apiGroups:
                  - ''
                  resources:
                  - configmaps
                  - pods
                  verbs:
                  - '*'
                - apiGroups:
                  - ''
                  resources:
                  - services
                  verbs:
                  - '*'
                - apiGroups:
                  - apps
                  resources:
                  - replicasets
                  - deployments
                  verbs:
                  - get
                  - list
                - apiGroups:
                  - monitoring.coreos.com
                  resources:
                  - servicemonitors
                  verbs:
                  - get
                  - create
                - apiGroups:
                  - apps
                  resourceNames:
                  - cert-utils-operator
                  resources:
                  - deployments/finalizers
                  verbs:
                  - update
                serviceAccountName: cert-utils-operator
            strategy: deployment
          installModes:
          - supported: true
            type: OwnNamespace
          - supported: true
            type: SingleNamespace
          - supported: false
            type: MultiNamespace
          - supported: false
            type: AllNamespaces
          keywords:
          - TLS
          - secrets
          - security
          - certificates
          links:
          - name: repository
            url: https://github.com/redhat-cop/cert-utils-operator
          - name: conatinerImage
            url: https://quay.io/redhat-cop/cert-utils-operator:latest
          maintainers:
          - email: rspazzol@redhat.com
            name: Raffaele Spazzoli
          maturity: alpha
          provider:
            name: Containers & PaaS CoP
          version: 0.0.3
    customResourceDefinitions: |
      - apiVersion: apiextensions.k8s.io/v1beta1
        kind: CustomResourceDefinition
        metadata:
          name: readytests.stable.example.com
        spec:
          group: stable.example.com
          versions:
            - name: v1
              served: true
              storage: true
          scope: Namespaced
          names:
            plural: readytests
            singular: readytest
            kind: ReadyTest
            shortNames:
            - rt
    packages: |
      - channels:
        - currentCSV: cert-utils-operator.v0.0.3
          name: alpha
        defaultChannel: alpha
        packageName: cert-utils-operator
  kind: ConfigMap
  metadata:
    name: "${NAME}"
    namespace: "${NAMESPACE}"
parameters:
- name: NAME
- name: NAMESPACE

`)

func testExtendedTestdataOlmCmCertutilReadytestsYamlBytes() ([]byte, error) {
	return _testExtendedTestdataOlmCmCertutilReadytestsYaml, nil
}

func testExtendedTestdataOlmCmCertutilReadytestsYaml() (*asset, error) {
	bytes, err := testExtendedTestdataOlmCmCertutilReadytestsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/olm/cm-certutil-readytests.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testExtendedTestdataOlmCmLearnV1Yaml = []byte(`apiVersion: v1
kind: Template
metadata:
  name: cm-learn-v1-template
objects:
- apiVersion: v1
  data:
    clusterServiceVersions: |
      - apiVersion: operators.coreos.com/v1alpha1
        kind: ClusterServiceVersion
        metadata:
          annotations:
            alm-examples: |-
              [
                {
                  "apiVersion": "app.learn.com/v1",
                  "kind": "Learn",
                  "metadata": {
                    "name": "example-learn"
                  },
                  "spec": {
                    "size": 2
                  }
                }
              ]
            capabilities: Basic Install
          name: learn-operator.v0.0.1
          namespace: learn
        spec:
          apiservicedefinitions: {}
          customresourcedefinitions:
            owned:
            - kind: Learn
              name: learns.app.learn.com
              version: v1
              description: An example to show how to make it managed by OLM
              displayName: Jian's Learn Operator
          description: Placeholder description
          displayName: Learn Operator
          install:
            spec:
              deployments:
              - name: learn-operator
                spec:
                  replicas: 1
                  selector:
                    matchLabels:
                      name: learn-operator
                  strategy: {}
                  template:
                    metadata:
                      labels:
                        name: learn-operator
                    spec:
                      containers:
                      - command:
                        - learn-operator
                        env:
                        - name: WATCH_NAMESPACE
                          valueFrom:
                            fieldRef:
                              fieldPath: metadata.annotations['olm.targetNamespaces']
                        - name: POD_NAME
                          valueFrom:
                            fieldRef:
                              fieldPath: metadata.name
                        - name: OPERATOR_NAME
                          value: learn-operator
                        image: quay.io/jiazha/learn-operator-image
                        imagePullPolicy: Always
                        name: learn-operator
                        resources: {}
                      serviceAccountName: learn-operator
              permissions:
              - rules:
                - apiGroups:
                  - ""
                  resources:
                  - pods
                  - services
                  - services/finalizers
                  - endpoints
                  - persistentvolumeclaims
                  - events
                  - configmaps
                  - secrets
                  verbs:
                  - '*'
                - apiGroups:
                  - apps
                  resources:
                  - deployments
                  - daemonsets
                  - replicasets
                  - statefulsets
                  verbs:
                  - '*'
                - apiGroups:
                  - monitoring.coreos.com
                  resources:
                  - servicemonitors
                  verbs:
                  - get
                  - create
                - apiGroups:
                  - apps
                  resourceNames:
                  - learn-operator
                  resources:
                  - deployments/finalizers
                  verbs:
                  - update
                - apiGroups:
                  - ""
                  resources:
                  - pods
                  verbs:
                  - get
                - apiGroups:
                  - apps
                  resources:
                  - replicasets
                  - deployments
                  verbs:
                  - get
                - apiGroups:
                  - app.learn.com
                  resources:
                  - '*'
                  verbs:
                  - '*'
                serviceAccountName: learn-operator
            strategy: deployment
          installModes:
          - supported: true
            type: OwnNamespace
          - supported: true
            type: SingleNamespace
          - supported: false
            type: MultiNamespace
          - supported: false
            type: AllNamespaces
          maturity: alpha
          provider: {}
          version: 0.0.1
    customResourceDefinitions: |
      - apiVersion: apiextensions.k8s.io/v1beta1
        kind: CustomResourceDefinition
        metadata:
          name: learns.app.learn.com
        spec:
          group: app.learn.com
          names:
            kind: Learn
            listKind: LearnList
            plural: learns
            singular: learn
          scope: Namespaced
          subresources:
            status: {}
          validation:
            openAPIV3Schema:
              description: Learn is the Schema for the learns API
              properties:
                apiVersion:
                  description: 'APIVersion defines the versioned schema of this representation
                    of an object. Servers should convert recognized schemas to the latest
                    internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
                  type: string
                kind:
                  description: 'Kind is a string value representing the REST resource this
                    object represents. Servers may infer this from the endpoint the client
                    submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
                  type: string
                metadata:
                  type: object
                spec:
                  description: LearnSpec defines the desired state of Learn
                  type: object
                status:
                  description: LearnStatus defines the observed state of Learn
                  type: object
              type: object
          version: v1
          versions:
          - name: v1
            served: true
            storage: true
    packages: |
      - channels:
        - currentCSV: learn-operator.v0.0.1
          name: alpha
        defaultChannel: alpha
        packageName: learn-operator
  kind: ConfigMap
  metadata:
    name: "${NAME}"
    namespace: "${NAMESPACE}"
parameters:
- name: NAME
- name: NAMESPACE

`)

func testExtendedTestdataOlmCmLearnV1YamlBytes() ([]byte, error) {
	return _testExtendedTestdataOlmCmLearnV1Yaml, nil
}

func testExtendedTestdataOlmCmLearnV1Yaml() (*asset, error) {
	bytes, err := testExtendedTestdataOlmCmLearnV1YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/olm/cm-learn-v1.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testExtendedTestdataOlmCmLearnV2Yaml = []byte(`apiVersion: v1
kind: Template
metadata:
  name: cm-learn-v2-template
objects:
- apiVersion: v1
  data:
    clusterServiceVersions: |
      - apiVersion: operators.coreos.com/v1alpha1
        kind: ClusterServiceVersion
        metadata:
          annotations:
            alm-examples: |-
              [
                {
                  "apiVersion": "app.learn.com/v1",
                  "kind": "Learn",
                  "metadata": {
                    "name": "example-learn"
                  },
                  "spec": {
                    "size": 2
                  }
                }
              ]
            capabilities: Basic Install
          name: learn-operator.v0.0.2
          namespace: learn
        spec:
          apiservicedefinitions: {}
          customresourcedefinitions:
            owned:
            - kind: Learn
              name: learns.app.learn.com
              version: v2
              description: An example to show how to make it managed by OLM
              displayName: Jian's Learn Operator
          description: Placeholder description
          displayName: Learn Operator
          install:
            spec:
              deployments:
              - name: learn-operator
                spec:
                  replicas: 1
                  selector:
                    matchLabels:
                      name: learn-operator
                  strategy: {}
                  template:
                    metadata:
                      labels:
                        name: learn-operator
                    spec:
                      containers:
                      - command:
                        - learn-operator
                        env:
                        - name: WATCH_NAMESPACE
                          valueFrom:
                            fieldRef:
                              fieldPath: metadata.annotations['olm.targetNamespaces']
                        - name: POD_NAME
                          valueFrom:
                            fieldRef:
                              fieldPath: metadata.name
                        - name: OPERATOR_NAME
                          value: learn-operator
                        image: quay.io/jiazha/learn-operator-image
                        imagePullPolicy: Always
                        name: learn-operator
                        resources: {}
                      serviceAccountName: learn-operator
              permissions:
              - rules:
                - apiGroups:
                  - ""
                  resources:
                  - pods
                  - services
                  - services/finalizers
                  - endpoints
                  - persistentvolumeclaims
                  - events
                  - configmaps
                  - secrets
                  verbs:
                  - '*'
                - apiGroups:
                  - apps
                  resources:
                  - deployments
                  - daemonsets
                  - replicasets
                  - statefulsets
                  verbs:
                  - '*'
                - apiGroups:
                  - monitoring.coreos.com
                  resources:
                  - servicemonitors
                  verbs:
                  - get
                  - create
                - apiGroups:
                  - apps
                  resourceNames:
                  - learn-operator
                  resources:
                  - deployments/finalizers
                  verbs:
                  - update
                - apiGroups:
                  - ""
                  resources:
                  - pods
                  verbs:
                  - get
                - apiGroups:
                  - apps
                  resources:
                  - replicasets
                  - deployments
                  verbs:
                  - get
                - apiGroups:
                  - app.learn.com
                  resources:
                  - '*'
                  verbs:
                  - '*'
                serviceAccountName: learn-operator
            strategy: deployment
          installModes:
          - supported: true
            type: OwnNamespace
          - supported: true
            type: SingleNamespace
          - supported: false
            type: MultiNamespace
          - supported: false
            type: AllNamespaces
          maturity: alpha
          provider: {}
          replaces: learn-operator.v0.0.1
          version: 0.0.2
      - apiVersion: operators.coreos.com/v1alpha1
        kind: ClusterServiceVersion
        metadata:
          annotations:
            alm-examples: |-
              [
                {
                  "apiVersion": "app.learn.com/v1",
                  "kind": "Learn",
                  "metadata": {
                    "name": "example-learn"
                  },
                  "spec": {
                    "size": 2
                  }
                }
              ]
            capabilities: Basic Install
          name: learn-operator.v0.0.1
          namespace: learn
        spec:
          apiservicedefinitions: {}
          customresourcedefinitions:
            owned:
            - kind: Learn
              name: learns.app.learn.com
              version: v1
              description: An example to show how to make it managed by OLM
              displayName: Jian's Learn Operator
          description: Placeholder description
          displayName: Learn Operator
          install:
            spec:
              deployments:
              - name: learn-operator
                spec:
                  replicas: 1
                  selector:
                    matchLabels:
                      name: learn-operator
                  strategy: {}
                  template:
                    metadata:
                      labels:
                        name: learn-operator
                    spec:
                      containers:
                      - command:
                        - learn-operator
                        env:
                        - name: WATCH_NAMESPACE
                          valueFrom:
                            fieldRef:
                              fieldPath: metadata.annotations['olm.targetNamespaces']
                        - name: POD_NAME
                          valueFrom:
                            fieldRef:
                              fieldPath: metadata.name
                        - name: OPERATOR_NAME
                          value: learn-operator
                        image: quay.io/jiazha/learn-operator-image
                        imagePullPolicy: Always
                        name: learn-operator
                        resources: {}
                      serviceAccountName: learn-operator
              permissions:
              - rules:
                - apiGroups:
                  - ""
                  resources:
                  - pods
                  - services
                  - services/finalizers
                  - endpoints
                  - persistentvolumeclaims
                  - events
                  - configmaps
                  - secrets
                  verbs:
                  - '*'
                - apiGroups:
                  - apps
                  resources:
                  - deployments
                  - daemonsets
                  - replicasets
                  - statefulsets
                  verbs:
                  - '*'
                - apiGroups:
                  - monitoring.coreos.com
                  resources:
                  - servicemonitors
                  verbs:
                  - get
                  - create
                - apiGroups:
                  - apps
                  resourceNames:
                  - learn-operator
                  resources:
                  - deployments/finalizers
                  verbs:
                  - update
                - apiGroups:
                  - ""
                  resources:
                  - pods
                  verbs:
                  - get
                - apiGroups:
                  - apps
                  resources:
                  - replicasets
                  - deployments
                  verbs:
                  - get
                - apiGroups:
                  - app.learn.com
                  resources:
                  - '*'
                  verbs:
                  - '*'
                serviceAccountName: learn-operator
            strategy: deployment
          installModes:
          - supported: true
            type: OwnNamespace
          - supported: true
            type: SingleNamespace
          - supported: false
            type: MultiNamespace
          - supported: false
            type: AllNamespaces
          maturity: alpha
          provider: {}
          version: 0.0.1
    customResourceDefinitions: |
      - apiVersion: apiextensions.k8s.io/v1beta1
        kind: CustomResourceDefinition
        metadata:
          name: learns.app.learn.com
        spec:
          group: app.learn.com
          names:
            kind: Learn
            listKind: LearnList
            plural: learns
            singular: learn
          scope: Namespaced
          subresources:
            status: {}
          validation:
            openAPIV3Schema:
              description: Learn is the Schema for the learns API
              properties:
                apiVersion:
                  description: 'APIVersion defines the versioned schema of this representation
                    of an object. Servers should convert recognized schemas to the latest
                    internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
                  type: string
                kind:
                  description: 'Kind is a string value representing the REST resource this
                    object represents. Servers may infer this from the endpoint the client
                    submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
                  type: string
                metadata:
                  type: object
                spec:
                  description: LearnSpec defines the desired state of Learn
                  type: object
                status:
                  description: LearnStatus defines the observed state of Learn
                  type: object
              type: object
          version: v2
          versions:
          - name: v2
            served: true
            storage: true
          - name: v1
            served: true
            storage: false
    packages: |
      - channels:
        - currentCSV: learn-operator.v0.0.1
          name: alpha
        - currentCSV: learn-operator.v0.0.2
          name: beta
        defaultChannel: alpha
        packageName: learn-operator
  kind: ConfigMap
  metadata:
    name: "${NAME}"
    namespace: "${NAMESPACE}"
parameters:
- name: NAME
- name: NAMESPACE

`)

func testExtendedTestdataOlmCmLearnV2YamlBytes() ([]byte, error) {
	return _testExtendedTestdataOlmCmLearnV2Yaml, nil
}

func testExtendedTestdataOlmCmLearnV2Yaml() (*asset, error) {
	bytes, err := testExtendedTestdataOlmCmLearnV2YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/olm/cm-learn-v2.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testExtendedTestdataOlmCmLightbendYaml = []byte(`apiVersion: v1
kind: Template
metadata:
  name: cm-lightbend-template
objects:
- apiVersion: v1
  data:
    clusterServiceVersions: |
      - apiVersion: operators.coreos.com/v1alpha1
        kind: ClusterServiceVersion
        metadata:
          annotations:
            alm-examples: "[{\n  \"apiVersion\": \"app.lightbend.com/v1alpha1\",\n  \"kind\"\
              : \"Console\",\n  \"metadata\": {\n    \"name\": \"example-console\",\n    \"\
              namespace\": \"placeholder\"\n  },\n  \"spec\": {\n    \"alertManagers\": null,\n\
              \    \"alpineImage\": \"alpine\",\n    \"alpineVersion\": \"3.8\",\n    \"apiGroupVersion\"\
              : \"rbac.authorization.k8s.io\",\n    \"busyboxImage\": \"busybox\",\n    \"\
              busyboxVersion\": \"1.30\",\n    \"configMapReloadImage\": \"jimmidyson/configmap-reload\"\
              ,\n    \"configMapReloadVersion\": \"v0.2.2\",\n    \"consoleAPI\": {\n    \
              \  \"defaultMonitorWarmup\": \"1m\",\n      \"defaultMonitorsConfigMap\": \"\
              console-api-default-monitors\",\n      \"staticRulesConfigMap\": \"console-api-static-rules\"\
              \n    },\n    \"consoleUIConfig\": {\n      \"isMonitorEditEnabled\": false,\n\
              \      \"logo\": \"\"\n    },\n    \"daemonSetApiVersion\": \"apps/v1beta2\"\
              ,\n    \"defaultCPURequest\": \"100m\",\n    \"defaultMemoryRequest\": \"50Mi\"\
              ,\n    \"deploymentApiVersion\": \"apps/v1beta2\",\n    \"elasticsearchImage\"\
              : \"elasticsearch\",\n    \"elasticsearchMemoryRequest\": \"510Mi\",\n    \"\
              elasticsearchVersion\": \"7.2.0\",\n    \"enableElasticsearch\": false,\n  \
              \  \"esConsoleExposePort\": 30080,\n    \"esConsoleImage\": \"{{.Values.imageCredentials.registry}}/enterprise-suite/es-console\"\
              ,\n    \"esConsoleVersion\": \"v1.2.6\",\n    \"esGrafanaEnvVars\": null,\n\
              \    \"esGrafanaImage\": \"{{.Values.imageCredentials.registry}}/enterprise-suite/es-grafana\"\
              ,\n    \"esGrafanaVersion\": \"v0.3.0\",\n    \"esGrafanaVolumeSize\": \"32Gi\"\
              ,\n    \"esMonitorImage\": \"{{.Values.imageCredentials.registry}}/enterprise-suite/console-api\"\
              ,\n    \"esMonitorVersion\": \"v1.2.3\",\n    \"exposeServices\": false,\n \
              \   \"goDnsmasqImage\": \"lightbend-docker-registry.bintray.io/lightbend/go-dnsmasq\"\
              ,\n    \"goDnsmasqVersion\": \"v0.1.7-1\",\n    \"imageCredentials\": {\n  \
              \    \"registry\": \"lightbend-docker-commercial-registry.bintray.io\",\n  \
              \    \"username\": \"setme\",\n      \"password\": \"setme\"\n    },\n    \"\
              imagePullPolicy\": \"IfNotPresent\",\n    \"kubeStateMetricsImage\": \"gcr.io/google_containers/kube-state-metrics\"\
              ,\n    \"kubeStateMetricsVersion\": \"v1.2.0\",\n    \"minikube\": false,\n\
              \    \"podUID\": null,\n    \"prometheusDomain\": \"prometheus.io\",\n    \"\
              prometheusImage\": \"prom/prometheus\",\n    \"prometheusMemoryRequest\": \"\
              250Mi\",\n    \"prometheusVersion\": \"v2.9.2\",\n    \"prometheusVolumeSize\"\
              : \"256Gi\",\n    \"rbacApiVersion\": \"rbac.authorization.k8s.io/v1\",\n  \
              \  \"usePersistentVolumes\": true\n  }\n}]"
            capabilities: Basic Install
            categories: Monitoring
            certified: 'false'
            containerImage: lightbend-docker-registry.bintray.io/lightbend/console-operator:1.2.3
            createdAt: '2019-09-18T00:00:00Z'
            description: Lightbend Console provides visualizations for Akka, Play, and Lagom
              applications. See https://developer.lightbend.com/docs/console/current/ for
              details.
            repository: https://github.com/lightbend/console-charts/tree/master/operator
            support: Lightbend, Inc.
          name: lightbend-console-operator.v0.0.1
          namespace: placeholder
        spec:
          customresourcedefinitions:
            owned:
            - description: Console
              displayName: Console
              kind: Console
              name: consoles.app.lightbend.com
              resources:
              - kind: Deployment
                version: v1
              - kind: Service
                version: v1
              - kind: ReplicaSet
                version: v1
              - kind: Pod
                version: v1
              - kind: Secret
                version: v1
              - kind: ConfigMap
                version: v1
              specDescriptors: []
              statusDescriptors: []
              version: v1alpha1
            required: []
          description: '## About the managed application
            Lightbend Console provides visualization and basic monitoring for Akka, Play,
            and Lagom applications. See https://developer.lightbend.com/docs/console/current/
            for further details.
            ## About this Operator
            The operator provides a simple installation of Lightbend Console. See https://github.com/lightbend/console-charts/blob/master/operator/README.md
            for details.
            ## Prerequisites for enabling this Operator
            None are required to install the operator.
            To install an instance of Console, you will need to add at minimum your credentials
            to the Console custom resource.
            '
          displayName: Lightbend Console Operator
          icon:
          - base64data: PHN2ZyBpZD0ibGlnaHRiZW5kLWljb24tZnVsbC1jb2xvciIgY2xhc3M9InN2Zy1pY29uIHN2Zy1pY29uLWxpZ2h0YmVuZC1mdWxsLWNvbG9yIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAzMDIgMjYyIj48dGl0bGU+bGlnaHRiZW5kLWljb248L3RpdGxlPjxnIGlkPSJpY29uIj48cGF0aCBkPSJNMSwxOTV2NTZhMTAsMTAsMCwwLDAsMTAsMTBIMjkxYTEwLDEwLDAsMCwwLDEwLTEwVjE5NWE1NTcuODUsNTU3Ljg1LDAsMCwxLTE1MCwyMEE1NTcuODUsNTU3Ljg1LDAsMCwxLDEsMTk1WiIgc3R5bGU9ImZpbGw6I2ZmOTMxZSIvPjxwYXRoIGQ9Ik0yOTEsMUgxMUExMCwxMCwwLDAsMCwxLDExVjE3NmE1MzkuOTQsNTM5Ljk0LDAsMCwwLDE1MCwyMSw1MzkuOTQsNTM5Ljk0LDAsMCwwLDE1MC0yMVYxMUExMCwxMCwwLDAsMCwyOTEsMVoiIHN0eWxlPSJmaWxsOiNmZjkzMWUiLz48L2c+PC9zdmc+
            mediatype: image/svg+xml
          install:
            spec:
              clusterPermissions:
              - rules:
                - apiGroups:
                  - ''
                  resources:
                  - namespaces
                  - serviceaccounts
                  verbs:
                  - get
                - apiGroups:
                  - ''
                  resources:
                  - configmaps
                  - secrets
                  verbs:
                  - '*'
                - apiGroups:
                  - rbac.authorization.k8s.io
                  resources:
                  - clusterrolebindings
                  - clusterroles
                  verbs:
                  - '*'
                - apiGroups:
                  - ''
                  resources:
                  - configmaps
                  - persistentvolumeclaims
                  - secrets
                  - serviceaccounts
                  - services
                  verbs:
                  - '*'
                - apiGroups:
                  - apps
                  resources:
                  - deployments
                  verbs:
                  - '*'
                - apiGroups:
                  - monitoring.coreos.com
                  resources:
                  - servicemonitors
                  verbs:
                  - get
                  - create
                - apiGroups:
                  - apps
                  resourceNames:
                  - console-operator
                  resources:
                  - deployments/finalizers
                  verbs:
                  - update
                - apiGroups:
                  - ''
                  resources:
                  - pods
                  verbs:
                  - get
                - apiGroups:
                  - apps
                  resources:
                  - replicasets
                  verbs:
                  - get
                - apiGroups:
                  - app.lightbend.com
                  resources:
                  - '*'
                  verbs:
                  - '*'
                serviceAccountName: console-operator
              deployments:
              - name: console-operator
                spec:
                  replicas: 1
                  selector:
                    matchLabels:
                      name: console-operator
                  template:
                    metadata:
                      labels:
                        name: console-operator
                    spec:
                      containers:
                      - env:
                        - name: WATCH_NAMESPACE
                          valueFrom:
                            fieldRef:
                              fieldPath: metadata.namespace
                        - name: POD_NAME
                          valueFrom:
                            fieldRef:
                              fieldPath: metadata.name
                        - name: OPERATOR_NAME
                          value: console-operator
                        image: lightbend-docker-registry.bintray.io/lightbend/console-operator:1.2.3
                        imagePullPolicy: Always
                        name: console-operator
                      serviceAccountName: console-operator
              permissions: []
            strategy: deployment
          installModes:
          - supported: true
            type: OwnNamespace
          - supported: true
            type: SingleNamespace
          - supported: false
            type: MultiNamespace
          - supported: false
            type: AllNamespaces
          keywords:
          - Monitoring
          labels: {}
          links:
          - name: Documentation
            url: https://developer.lightbend.com/docs/console/current/
          maintainers:
          - email: info@lightbend.com
            name: Lightbend, Inc.
          maturity: alpha
          minKubeVersion: 1.10.0
          provider:
            name: Lightbend, Inc.
          selector:
            matchLabels: {}
          version: 0.0.1
    customResourceDefinitions: |
      - apiVersion: apiextensions.k8s.io/v1beta1
        kind: CustomResourceDefinition
        metadata:
          name: consoles.app.lightbend.com
          namespace: lightbend
        spec:
          group: app.lightbend.com
          names:
            kind: Console
            listKind: ConsoleList
            plural: consoles
            singular: console
          scope: Namespaced
          subresources:
            status: {}
          version: v1alpha1
          versions:
          - name: v1alpha1
            served: true
            storage: true
    packages: |
      - channels:
        - currentCSV: lightbend-console-operator.v0.0.1
          name: alpha
        packageName: lightbend-console-operator
  kind: ConfigMap
  metadata:
    name: "${NAME}"
    namespace: "${NAMESPACE}"
parameters:
- name: NAME
- name: NAMESPACE

`)

func testExtendedTestdataOlmCmLightbendYamlBytes() ([]byte, error) {
	return _testExtendedTestdataOlmCmLightbendYaml, nil
}

func testExtendedTestdataOlmCmLightbendYaml() (*asset, error) {
	bytes, err := testExtendedTestdataOlmCmLightbendYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/olm/cm-lightbend.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testExtendedTestdataOlmCmNamespaceconfigYaml = []byte(`apiVersion: v1
kind: Template
metadata:
  name: cm-namespaceconfig-template
objects:
- apiVersion: v1
  data:
    clusterServiceVersions: |
      - apiVersion: operators.coreos.com/v1alpha1
        kind: ClusterServiceVersion
        metadata:
          annotations:
            alm-examples: |-
              [
                {
                  "apiVersion": "redhatcop.redhat.io/v1alpha1",
                  "kind": "NamespaceConfig",
                  "metadata": {
                    "name": "example-namespaceconfig"
                  },
                  "spec": {
                    "size": 3
                  }
                }
              ]
            capabilities: Full Lifecycle
            categories: Security
            certified: "false"
            containerImage: quay.io/redhat-cop/namespace-configuration-operator:latest
            createdAt: 5/28/2019
            description: This operator provides a facility to define and enforce namespace
              configurations
            repository: https://github.com/redhat-cop/namespace-configuration-operator
            support: Best Effort
          name: namespace-configuration-operator.v0.1.0
          namespace: namespace-configuration-operator
        spec:
          apiservicedefinitions: {}
          customresourcedefinitions:
            owned:
            - description: Represent the desired configuration for a set of namespaces selected
                via labels
              displayName: Namespace Configuration
              kind: NamespaceConfig
              name: namespaceconfigs.redhatcop.redhat.io
              version: v1alpha1
          description: "The namespace configuration operator helps keeping a namespace's configuration
            aligned with one of more policies specified as a CRs.\n\nThe ` + "`" + `NamespaceConfig` + "`" + `
            CR allows specifying one or more objects that will be created in the selected
            namespaces.\n\nFor example using this operator an administrator can enforce a
            specific ResourceQuota or LimitRange on a set of namespaces. For example with
            the following snippet:\n\n` + "`" + `` + "`" + `` + "`" + `\napiVersion: redhatcop.redhat.io/v1alpha1\nkind:
            NamespaceConfig\nmetadata:\n  name: small-size\nspec:\n  selector:\n    matchLabels:\n
            \     size: small  \n  resources:\n  - apiVersion: v1\n    kind: ResourceQuota\n
            \   metadata:\n      name: small-size  \n    spec:\n      hard:\n        requests.cpu:
            \"4\"\n        requests.memory: \"2Gi\"\n` + "`" + `` + "`" + `` + "`" + `\n\nwe are enforcing that all the
            namespaces with label: ` + "`" + `size=small` + "`" + ` receive the specified resource quota.  \n"
          displayName: Namespace Configuration Operator
          icon:
          - base64data: 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
            mediatype: image/png
          install:
            spec:
              clusterPermissions:
              - rules:
                - apiGroups:
                  - '*'
                  resources:
                  - '*'
                  verbs:
                  - '*'
                serviceAccountName: namespace-configuration-operator
              deployments:
              - name: namespace-configuration-operator
                spec:
                  replicas: 1
                  selector:
                    matchLabels:
                      name: namespace-configuration-operator
                  strategy: {}
                  template:
                    metadata:
                      labels:
                        name: namespace-configuration-operator
                    spec:
                      containers:
                      - command:
                        - namespace-configuration-operator
                        env:
                        - name: WATCH_NAMESPACE
                          valueFrom:
                            fieldRef:
                              fieldPath: metadata.annotations['olm.targetNamespaces']
                        - name: POD_NAME
                          valueFrom:
                            fieldRef:
                              fieldPath: metadata.name
                        - name: OPERATOR_NAME
                          value: namespace-configuration-operator
                        image: quay.io/redhat-cop/namespace-configuration-operator:v0.1.0
                        imagePullPolicy: Always
                        name: namespace-configuration-operator
                        resources: {}
                      serviceAccountName: namespace-configuration-operator
              permissions:
              - rules:
                - apiGroups:
                  - ""
                  resources:
                  - configmaps
                  - pods
                  verbs:
                  - '*'
                - apiGroups:
                  - ""
                  resources:
                  - services
                  verbs:
                  - '*'
                - apiGroups:
                  - apps
                  resources:
                  - replicasets
                  - deployments
                  verbs:
                  - get
                  - list
                - apiGroups:
                  - monitoring.coreos.com
                  resources:
                  - servicemonitors
                  verbs:
                  - get
                  - create
                - apiGroups:
                  - apps
                  resourceNames:
                  - namespace-configuration-operator
                  resources:
                  - deployments/finalizers
                  verbs:
                  - update
                serviceAccountName: namespace-configuration-operator
            strategy: deployment
          installModes:
          - supported: true
            type: OwnNamespace
          - supported: true
            type: SingleNamespace
          - supported: false
            type: MultiNamespace
          - supported: false
            type: AllNamespaces
          keywords:
          - namespace
          - configuration
          - policy
          - management
          links:
          - name: repository
            url: https://github.com/redhat-cop/namespace-configuration-operator
          - name: conatinerImage
            url: https://quay.io/redhat-cop/namespace-configuration-operator:latest
          - name: blog
            url: https://blog.openshift.com/controlling-namespace-configurations
          maintainers:
          - email: rspazzol@redhat.com
            name: Raffaele Spazzoli
          maturity: alpha
          minKubeVersion: 1.10.0
          provider:
            name: Containers & PaaS CoP
          replaces: namespace-configuration-operator.v0.0.1
          skips:
          - namespace-configuration-operator.v0.0.2
          version: 0.1.0
      - apiVersion: operators.coreos.com/v1alpha1
        kind: ClusterServiceVersion
        metadata:
          annotations:
            alm-examples: '[{"apiVersion":"redhatcop.redhat.io/v1alpha1","kind":"NamespaceConfig","metadata":{"name":"example-namespaceconfig"},"spec":{"size":3}}]'
            capabilities: Full Lifecycle
            categories: Security
            certified: "false"
            containerImage: quay.io/redhat-cop/namespace-configuration-operator:latest
            createdAt: 5/28/2019
            description: This operator provides a facility to define and enforce namespace
              configurations
            repository: https://github.com/redhat-cop/namespace-configuration-operator
            support: Best Effort
          name: namespace-configuration-operator.v0.0.2
          namespace: namespace-configuration-operator
        spec:
          apiservicedefinitions: {}
          customresourcedefinitions:
            owned:
            - description: Represent the desired configuration for a set of namespaces selected
                via labels
              displayName: Namespace Configuration
              kind: NamespaceConfig
              name: namespaceconfigs.redhatcop.redhat.io
              version: v1alpha1
          description: "The namespace configuration operator helps keeping a namespace's configuration
            aligned with one of more policies specified as a CRs.\n\nThe ` + "`" + `NamespaceConfig` + "`" + `
            CR allows specifying one or more objects that will be created in the selected
            namespaces.\n\nFor example using this operator an administrator can enforce a
            specific ResourceQuota or LimitRange on a set of namespaces. For example with
            the following snippet:\n\n` + "`" + `` + "`" + `` + "`" + `\napiVersion: redhatcop.redhat.io/v1alpha1\nkind:
            NamespaceConfig\nmetadata:\n  name: small-size\nspec:\n  selector:\n    matchLabels:\n
            \     size: small  \n  resources:\n  - apiVersion: v1\n    kind: ResourceQuota\n
            \   metadata:\n      name: small-size  \n    spec:\n      hard:\n        requests.cpu:
            \"4\"\n        requests.memory: \"2Gi\"\n` + "`" + `` + "`" + `` + "`" + `\n\nwe are enforcing that all the
            namespaces with label: ` + "`" + `size=small` + "`" + ` receive the specified resource quota.  \n"
          displayName: Namespace Configuration Operator
          icon:
          - base64data: iVBORw0KGgoAAAANSUhEUgAAAOoAAADYCAMAAADS+I/aAAAAgVBMVEX///8AAAD29vb8/Pz5+fnz8/Pq6urf3994eHjIyMi8vLzU1NTQ0NB8fHzx8fGrq6szMzOQkJBtbW2enp5BQUGxsbGkpKRJSUlfX1/d3d1mZmaEhITAwMA5OTkVFRXl5eVTU1MmJiYfHx+WlpZaWloODg6Li4suLi4ZGRk9PT1HR0fjV/a/AAAPPUlEQVR4nM1daUPqOhBVQHZEQJBVWhHw+v9/4LWt0LQ9k8xkaT2fru9BkiHbmTUPD0HxvNlPZ5P559vh5QeH72g9709mq+lw1GuF7blGHPen7eFRi8P2NDw2PU43dIe7b72QKr4vw27TI7ZCdzl/54t5w0d/+Nz0yGUYzWK5mDccTpumx8/FeGIv5g27UdNSmLHZucuZ4dJrWhYdWtMXX4ImOEw7TUtEoNf3KWeGyV+c2oHgWpHgbdC0ZCUM4zCCJvgYNi2dguVXOEETvC+blvAX+zisoAn+xMyODfzWFw7jhgXtrusRNMFnowx5Vp+gCWaNCTo41yvpD5q5eVrb2gX9wbwBAjVsQtAE+5oF7dhM6dt2t1gth4PxDwbD5eo0Wb9aNNOvVdKxbHCH/mpAGVTavf1iHouae6+RGF/4wzrPpxxFuzNaSdbJKriIGZ7Yq249FRnHequI2/I2lHAFjJij6Q/a8sY7+zmv9Y8a+MSKNZK5wwW45y3l4FcsR/1+WVrMp4rONGZ0E3jDvplHMPdiARsxpnbioyMCT1dj9xdvZtyu2SD36auvCo7Gvk9eaVvLqE28+uxOQc/U8cw7P+2YbvBrEEpsumT6TyF6fTZcPh8B/HgGSb+DkbWNnrG8e/+FDZIGtXMta5V1o+1tG1iJ7GhX8YfX3vVnbw0a5EDX/9WRsah41nUU1eLgb+vsdd/+utH5hBfeujFAt2O9cYl/mk5q9IMeY3oYnjiiho3+qzc6RbOIvXD/E93+3Ef7nsbiQafb063Xtk1Zo3HW1bt02414jOgL/sO16ZhsuiF3UZd0KTjam2ia0ljAzdMHNSSno4m+yxqMUeiQK83h56c3aqMRgW1K1nf7NkkvccOxj+S8Wt9+5C3WeIRNi6KqlpoHaWD5A0Fx5NayU+io5Vu31w+Cul+tljBlxucf6a3jcTPaHI9dj/rkHRRvsiCIlI7K1SGK7oi3i3fGscDjO8tbIrSIiPftJxBXOfMc1EzQm4u0HcJZfGauRezwmPjV+Qhfg/QmjJ2aaeFve1YRiGM4krUyxa1wbaCkqH5dSkToiehkauM2+Cc5HdPu1d+Nt2ssaQLzpC9BC7QbbScURwus0QkM8B08SBFLGpNmRp/XDnY6CC4c7P+SnuLExff4Imzn5+raflGd49XDpjl4UuUGjRaxiqUcOjXtX4mLCi9hbtPYg2tD8rHLUBhOdjs4sJ0ME8Qps234ZUtVELoMJQ20P+9fw5c6jHVi7lbM862JDriiBfpuV7UkwXnFuiaPq8Cj88QfnXks/Mug6IHDxwXcJKyzDy9+Fz2sQmrYV2t5gcFz+AkOmHO0QKbuZMiv0MSI+cUK53qDH4MHPYOVYa8xVyqICi1nWvaqBw5e+Zhxm+MG4E/k5p2pbgnOdmhVVd4D8VF4O5rHDH8h7k5dHFAcZfXcYCjpyGFBqZBwWo2UBx5K3KSP9BR5KQsLBmJWe5EuSvMCyGRNBxO0szDv1JvqFxXvP6DQmRk/8NRrDhpoCDOoxnApcNXpXM1QlwEyY5ov+OqRpNVCYeyuvgfoj+Iaa1Sh7sbiNsqCNO+I6gLWuorhvaG3RiBCGfEELWlE0ZFukRPxWf7RDVYU1I2WtsP1yzfVFNnH5OdmaxOx0mYWXDJZmq4OGMOl+wKySwk8eeWZuFDa+WMklNTMfZDeqnO5oLgdCX2gJKvCwPhLkv4zd43MYbofCA1KYpMX5Bppl3BJ0neGfw0eTOn/aXeej73RaLRRJUFGqUggqcb+W4Xmsi67FlhxOkj3vF6L5//2HkKAFoEs0leQu0trlLmkryempO3uwJxCkeBmYEOlHYSBxXxRCY1MXVs/3GWz3hlW72Y6iQQ5w9nUIUshNR4KkhxIHO+ZS8qxfJBnPIkRNUxxLJAk/RydkPkgGF13LMoXpD4KtFXloUCSmgJVPpNLyrFvxnJJM0qEyJVYUlYyGSmrTFJmVmQJiWUL/Gcrvxk7C/WxbP7O9ylHUn3uBIlXrA3bhe1JykupsuZzyrri7CY1MYcjA4Rl1J42geIHqsk/14aFkkoutgLwqWQn6YM2HjtZKyovu8kqlVQTqqzFB+T6DJpNob2i6cuiaCXLZM1XApOgcTPBy9jCgBG3yIXufjXrr6PXKjsd/9DlOP8ztfbfNUAuFbUVdQmXPtd3Z5Z6syxY0xK9RrGUqbKySbc20YlGjLUgryFkLdUKmFB45QLOZRWoF2S4txZHTAs9x4/lrtLH81Px75usEkXKqgTS8AEbC/1KWrgJ0/xEhURmsop2DHbB6ZH68oCOQPlI7KHYa9P8ROXUtwjykR9MUfo9YIQPkKGvEKlUN1fmuQZZf02CgGZ5jab6hbLBUmtw36k7oay/9gygfDlEBdBQeFSq97vJaixroOJ2oQDdy9u1WoByKHiQlc6mquCuu4Bg5UBR+hpZxXHLP+dwzJQ0/x3BN0KlvSnRHFHyt9u8QutfFVH+BeAxC5ZlMi2NwFFWTtUi1WcJ1ny41CHPsjJsAaqRF4gasFKVImt5v9qoU0RUeo6CjQH8/5B14T3LarB7FA9Y8IEgBWhuUGRN6zooFMamUqH2gi2ZyMAnwtYHUGRNeZMiq02Y6jOt05W3f52z2km3hiLrvxL3t5G1TZXwqVh46zyWvrNyOoqsh0RWRX9d2zSLHQvVwAtB9Jcr3m6lgxRZ03pYCjm10qpQTE9cDaUDFCJQ6nzGbtI1rPCmtB6Wwk6lPsAUwDABdmFc/VQYYnibunR7KLKef4TvKGsrXg164tOiEqKONiGg+54KQI4K3d0XabZEVePHERnzDtG6f1kMN8yQzpKskPAB0uylDNjwvXCD331XtwWqyjrSFfr8XrAoTcFGhqktOL58FGnZFluqSFr0eSz1kSN9zk3fvV/QO2IlAIOLe0X01s1l8KuI3levWvhKPUu2Bu8sK9OitT9Ndgt6+wEzmnNWYis/ZVKyByUVhTt5sXcB35lrzbGOytXmiqTlW13ikLUiF0UgPcixyWJQxvxOhqr8RfKGk7usSA1y4/tUoAByZUqe/XEu0Y60ICeLCxVShH0GkqrlzjcDaNPpYhVJWuD6RrgavYC+53LcEe5P2hEvCIyxqHNRAPhZrSj3L4hQBc03BE8rOBYiQO5Kh+aIClyaQbZ5wZ8p3PRLFM1uq8Y9Lcgp0pyfgnBitxsHRQjYeW2etVeHRlZBfI7btIIGraih6RUCjWOGrjtXPjTdCKKncEpzPBzN2YkyI4+TzkOvdPPay/ngKUiWyqwpgA7cxq6m7LcZFYim0wpG1FBKTDqsU5QeJlRy7qtA5elOHlF0AAqL+NOlIwugG0DXgLItO/mB51bPCNU8FtmCCwyJllpzrqMY3+IHbreYmzkTkQjJdaPeFYdnMoQq0jQBUiXKeyh7WFHXCAMoIE3ADVVJU3MgPqE+tLa/6uerBtLhP3djBBoZewWrkqb3MSb8Z71tt7KJ/MeJpUBOD+4ZrIbBZd4l+JqwQdKq3hqoijYiK8ziQ2oZ0Gx00FkUmwwblQ0eIk7sgQhQZOnBaiHbjOSm5qJxyWT1arTRV37tULXR0UHC6ktRZDJJE+p1LUXCcgzL1dsmUJgCDJ9g+IgUeTJJV7cpvJ/qy2dWldfqbfMVxvcJV7A51FBR2jJJk2WYXlP5KcwdAlB0w2xXaMwyfUmxDWarPaF3UfKP9p0ysUMzoaExxENpsOCjoSMlUrUkqWL0ZntKCfXcf2gnVBgNBrr8/sxcpsP7v3INWGCmpizC3l9Cgi4F7U+aT0OU/p1Lqgxa4CcgrS6xZy8+TB/UTut9zWfZ48u7zIo5QqRc0pnGns8naOrTscP7BZXO3OouqX2YL23o98sncCVazZ14s5qlrOqEJBVbMunMZr9BN7ALzdK5UblkJyVrNjNcKJJaPEdIrmG/gee4G1qXu7vwVsNEA8ve91ITamwGcSQ8OH5jAbGBUqOiFz53TndsOU3KAhtkZPX9hg4OTaB7Kehd6ewrt8yXvTu6MyxJu/Me9Ei4Tkj9S/18upeUxef6DGF3MN31+/P+brEPwvpxFAZ90Cs65qBYl+IcMlA8w3G1282mtmkGRAohHQikLNjBSAkTNFlXPOB2/l0ttzERSEQfMLjAiP8HQ8t4jvPe7JIVibrlNBWAj+kY7UjOKNok7YoAEH5DmvarWfK3nkM8eFJAp5Swb0cbUfXBR12SUbtswI3shi9BZdtYRb4Qz8W8a2aqeAnW8AhilSnbbVeCmOkaUxWFIKmvRaAr0WrPUAqyTh/r3JzRhxqeBoTGTbvYLaoKi97u0R0sl4PwvIHKDLO8XGNC1oYecyyCyAuzzDYgKzc1/CBeAmp72Q6NDL4OmOzJA/kknnWLVAhHDdRWC/JRR4tU9V+Qz5mHJ7c60LGIDkyUjCv7aFBWWlInozhppqxBESUA2PYvIqd2qUC4x8bOYU1GrqMipclrbuTBTvL48DAeOpaziSewNdVbPbjqNOk+NXD6IjQ1EZwzUhJo0gc8ZDJJoEk8ivz0ENM9xDUSpydNGoPowT9dH3QXNW5YbZELb9e85tirxdyQQJs153FtaetynWu4dTbaOGOvnkh9iZRAsXE59Emfnn9qvaxnTwn4RN/kS5gpvJsKDKVv1sE4cdeQFxjgVzaVN54FsXB3TAnLQcw/xpL6/kPG2tqKygkCHYnGMuFnvyFjbfP7AcFKmplT1s4rb8u4ZZzRx/eAXA08U1fBxUv/R0ai/cEyyoIJTpp05Hwo7jnZZl7f0kbg1R/eORCYDa9KRA0aJOGjKyOeWUm7mcW89oOSlhuOzME8nid7kbnnaT/h1kq91qU8Cl5sOFz2rFF19xfBgy1eTA484JBLEuuTpjJUuzc8SR6GeazZqNUVFDa44W17WSz349Gm1zv2NqPxYLm4mGoOIXzXbYI2JZQHQ4iMBQOOvLK8nvHdjBfQWL7VP7ynKnDRsnw8xxbz4DFfGowYpNgXDo14ThRoHB1ecW7AbVKB/FU6CzRw7iJ0zJqlIxbBwxXZMBtGXPBHZvSOKRGA6YprY/eLBgPJU3hMrP9EPBjA0erdIBJfp8YDpHQYeGMV/b86oTnaQ0lJQgLzQC+R+MeAbU4AOO9qMab4Q28q1LczrKd/IFjTAr1pX1Cv79q3Tgz6G2iNpxOjZhvtpqOw9uv68DwaTmeT+fbz7fUlwb/vt8/5fHJZTIfjXt2s7z9MqsTdLqoFFgAAAABJRU5ErkJggg==
            mediatype: image/png
          install:
            spec:
              clusterPermissions:
              - rules:
                - apiGroups:
                  - '*'
                  resources:
                  - '*'
                  verbs:
                  - '*'
                serviceAccountName: namespace-configuration-operator
              deployments:
              - name: namespace-configuration-operator
                spec:
                  replicas: 1
                  selector:
                    matchLabels:
                      name: namespace-configuration-operator
                  strategy: {}
                  template:
                    metadata:
                      labels:
                        name: namespace-configuration-operator
                    spec:
                      containers:
                      - command:
                        - namespace-configuration-operator
                        env:
                        - name: WATCH_NAMESPACE
                          valueFrom:
                            fieldRef:
                              fieldPath: metadata.annotations['olm.targetNamespaces']
                        - name: POD_NAME
                          valueFrom:
                            fieldRef:
                              fieldPath: metadata.name
                        - name: OPERATOR_NAME
                          value: namespace-configuration-operator
                        image: quay.io/redhat-cop/namespace-configuration-operator:v0.0.2
                        imagePullPolicy: Always
                        name: namespace-configuration-operator
                        resources: {}
                      serviceAccountName: namespace-configuration-operator
              permissions:
              - rules:
                - apiGroups:
                  - ""
                  resources:
                  - configmaps
                  - pods
                  verbs:
                  - '*'
                - apiGroups:
                  - ""
                  resources:
                  - services
                  verbs:
                  - '*'
                - apiGroups:
                  - apps
                  resources:
                  - replicasets
                  - deployments
                  verbs:
                  - get
                  - list
                - apiGroups:
                  - monitoring.coreos.com
                  resources:
                  - servicemonitors
                  verbs:
                  - get
                  - create
                - apiGroups:
                  - apps
                  resourceNames:
                  - namespace-configuration-operator
                  resources:
                  - deployments/finalizers
                  verbs:
                  - update
                serviceAccountName: namespace-configuration-operator
            strategy: deployment
          installModes:
          - supported: true
            type: OwnNamespace
          - supported: true
            type: SingleNamespace
          - supported: false
            type: MultiNamespace
          - supported: false
            type: AllNamespaces
          keywords:
          - namespace
          - configuration
          - policy
          - management
          links:
          - name: repository
            url: https://github.com/redhat-cop/namespace-configuration-operator
          - name: conatinerImage
            url: https://quay.io/redhat-cop/namespace-configuration-operator:latest
          - name: blog
            url: https://blog.openshift.com/controlling-namespace-configurations
          maintainers:
          - email: rspazzol@redhat.com
            name: Raffaele Spazzoli
          maturity: alpha
          provider:
            name: Containers & PaaS CoP
          replaces: namespace-configuration-operator.v0.0.1
          version: 0.0.2
      - apiVersion: operators.coreos.com/v1alpha1
        kind: ClusterServiceVersion
        metadata:
          annotations:
            capabilities: Full Lifecycle
            categories: Security
            certified: "false"
            description: This operator provides a facility to define and enforce namespace configurations
            containerImage: quay.io/redhat-cop/namespace-configuration-operator:latest
            createdAt: 5/28/2019
            support: Best Effort
            repository: https://github.com/redhat-cop/namespace-configuration-operator
            alm-examples: |
              [
                {
                  "apiVersion": "redhatcop.redhat.io/v1alpha1",
                  "kind": "NamespaceConfig",
                  "metadata": {
                      "name": "small-size"
                  },
                  "spec": {
                      "selector": {
                        "matchLabels": {
                            "size": "small"
                        }
                      },
                      "resources": [
                        {
                            "apiVersion": "v1",
                            "kind": "ResourceQuota",
                            "metadata": {
                              "name": "small-size"
                            },
                            "spec": {
                              "hard": {
                                  "requests.cpu": "4",
                                  "requests.memory": "2Gi"
                              }
                            }
                        }
                      ]
                  }
                }
              ]
          name: namespace-configuration-operator.v0.0.1
          namespace: namespace-configuration-operator
        spec:
          icon:
          - base64data: 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
            mediatype: image/png
          links:
          - name: repository
            url: https://github.com/redhat-cop/namespace-configuration-operator
          - name: conatinerImage
            url: https://quay.io/redhat-cop/namespace-configuration-operator:latest
          - name: blog
            url: https://blog.openshift.com/controlling-namespace-configurations
          installModes:
          - supported: true
            type: OwnNamespace
          - supported: true
            type: SingleNamespace
          - supported: false
            type: MultiNamespace
          - supported: false
            type: AllNamespaces
          maturity: alpha
          version: 0.0.1
          keywords: ['namespace', 'configuration', 'policy', 'management']
          maintainers:
          - name: Raffaele Spazzoli
            email: rspazzol@redhat.com
          provider:
            name: Containers & PaaS CoP
          apiservicedefinitions: {}
          description: |
            The namespace configuration operator helps keeping a namespace's configuration aligned with one of more policies specified as a CRs.
            The ` + "`" + `NamespaceConfig` + "`" + ` CR allows specifying one or more objects that will be created in the selected namespaces.
            For example using this operator an administrator can enforce a specific ResourceQuota or LimitRange on a set of namespaces. For example with the following snippet:
            ` + "`" + `` + "`" + `` + "`" + `
            apiVersion: redhatcop.redhat.io/v1alpha1
            kind: NamespaceConfig
            metadata:
              name: small-size
            spec:
              selector:
                matchLabels:
                  size: small
              resources:
              - apiVersion: v1
                kind: ResourceQuota
                metadata:
                  name: small-size
                spec:
                  hard:
                    requests.cpu: "4"
                    requests.memory: "2Gi"
            ` + "`" + `` + "`" + `` + "`" + `
            we are enforcing that all the namespaces with label: ` + "`" + `size=small` + "`" + ` receive the specified resource quota.
          customresourcedefinitions:
            owned:
            - kind: NamespaceConfig
              name: namespaceconfigs.redhatcop.redhat.io
              version: v1alpha1
              displayName: Namespace Configuration
              description: Represent the desired configuration for a set of namespaces selected via labels
          displayName: Namespace Configuration Operator
          install:
            spec:
              clusterPermissions:
              - rules:
                - apiGroups:
                  - "*"
                  resources:
                  - "*"
                  verbs:
                  - '*'
                serviceAccountName: namespace-configuration-operator
              deployments:
              - name: namespace-configuration-operator
                spec:
                  replicas: 1
                  selector:
                    matchLabels:
                      name: namespace-configuration-operator
                  strategy: {}
                  template:
                    metadata:
                      labels:
                        name: namespace-configuration-operator
                    spec:
                      containers:
                      - command:
                        - namespace-configuration-operator
                        env:
                        - name: WATCH_NAMESPACE
                          value: ""
                        - name: POD_NAME
                          valueFrom:
                            fieldRef:
                              fieldPath: metadata.name
                        - name: OPERATOR_NAME
                          value: namespace-configuration-operator
                        image: quay.io/redhat-cop/namespace-configuration-operator:latest
                        imagePullPolicy: Always
                        name: namespace-configuration-operator
                        resources: {}
                      serviceAccountName: namespace-configuration-operator
              permissions:
              - rules:
                - apiGroups:
                  - ""
                  resources:
                  - configmaps
                  - pods
                  verbs:
                  - '*'
                - apiGroups:
                  - ""
                  resources:
                  - services
                  verbs:
                  - '*'
                - apiGroups:
                  - apps
                  resources:
                  - replicasets
                  - deployments
                  verbs:
                  - get
                  - list
                - apiGroups:
                  - monitoring.coreos.com
                  resources:
                  - servicemonitors
                  verbs:
                  - get
                  - create
                - apiGroups:
                  - apps
                  resourceNames:
                  - namespace-configuration-operator
                  resources:
                  - deployments/finalizers
                  verbs:
                  - update
                serviceAccountName: namespace-configuration-operator
            strategy: deployment
    customResourceDefinitions: |
      - apiVersion: apiextensions.k8s.io/v1beta1
        kind: CustomResourceDefinition
        metadata:
          name: namespaceconfigs.redhatcop.redhat.io
        spec:
          group: redhatcop.redhat.io
          names:
            kind: NamespaceConfig
            listKind: NamespaceConfigList
            plural: namespaceconfigs
            singular: namespaceconfig
          scope: Namespaced
          subresources:
            status: {}
          validation:
            openAPIV3Schema:
              properties:
                apiVersion:
                  description: 'APIVersion defines the versioned schema of this representation
                    of an object. Servers should convert recognized schemas to the latest
                    internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
                  type: string
                kind:
                  description: 'Kind is a string value representing the REST resource this
                    object represents. Servers may infer this from the endpoint the client
                    submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
                  type: string
                metadata:
                  type: object
                spec:
                  properties:
                    resources:
                      items:
                        type: object
                      type: array
                    selector:
                      type: object
                  type: object
                status:
                  properties:
                    lastUpdate:
                      format: date-time
                      type: string
                    reason:
                      type: string
                    status:
                      enum:
                      - Success
                      - Failure
                      type: string
                  type: object
          version: v1alpha1
          versions:
          - name: v1alpha1
            served: true
            storage: true
    packages: |
      - channels:
        - currentCSV: namespace-configuration-operator.v0.1.0
          name: alpha
        defaultChannel: alpha
        packageName: namespace-configuration-operator
  kind: ConfigMap
  metadata:
    name: "${NAME}"
    namespace: "${NAMESPACE}"
parameters:
- name: NAME
- name: NAMESPACE

`)

func testExtendedTestdataOlmCmNamespaceconfigYamlBytes() ([]byte, error) {
	return _testExtendedTestdataOlmCmNamespaceconfigYaml, nil
}

func testExtendedTestdataOlmCmNamespaceconfigYaml() (*asset, error) {
	bytes, err := testExtendedTestdataOlmCmNamespaceconfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/olm/cm-namespaceconfig.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testExtendedTestdataOlmConfigmapTestYaml = []byte(`apiVersion: v1
kind: ConfigMap
metadata:
  name: test
  namespace: default
`)

func testExtendedTestdataOlmConfigmapTestYamlBytes() ([]byte, error) {
	return _testExtendedTestdataOlmConfigmapTestYaml, nil
}

func testExtendedTestdataOlmConfigmapTestYaml() (*asset, error) {
	bytes, err := testExtendedTestdataOlmConfigmapTestYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/olm/configmap-test.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testExtendedTestdataOlmCsWithoutImageYaml = []byte(`apiVersion: v1
kind: Template
metadata:
  name: catalogsource-image-template
objects:
- apiVersion: operators.coreos.com/v1alpha1
  kind: CatalogSource
  metadata:
    name: "${NAME}"
    namespace: "${NAMESPACE}"
  spec:
    displayName: "${DISPLAYNAME}"
    publisher: "${PUBLISHER}"
    sourceType: "${SOURCETYPE}"
    updateStrategy:
      registryPoll:
        interval: 10m0s
parameters:
- name: NAME
- name: NAMESPACE
- name: DISPLAYNAME
- name: PUBLISHER
- name: SOURCETYPE
`)

func testExtendedTestdataOlmCsWithoutImageYamlBytes() ([]byte, error) {
	return _testExtendedTestdataOlmCsWithoutImageYaml, nil
}

func testExtendedTestdataOlmCsWithoutImageYaml() (*asset, error) {
	bytes, err := testExtendedTestdataOlmCsWithoutImageYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/olm/cs-without-image.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testExtendedTestdataOlmCscYaml = []byte(`apiVersion: v1
kind: Template
metadata:
  name: opsrc-template
objects:
- kind: CatalogSourceConfig
  apiVersion: operators.coreos.com/v1
  metadata:
    name: "${NAME}"
    namespace: "${NAMESPACE}"
  spec:
    packages: "${PACKAGES}"
    targetNamespace: "${TARGETNAMESPACE}"
    source: "${SOURCE}"
parameters:
- name: NAME
- name: NAMESPACE
- name: PACKAGES
- name: TARGETNAMESPACE
- name: SOURCE
`)

func testExtendedTestdataOlmCscYamlBytes() ([]byte, error) {
	return _testExtendedTestdataOlmCscYaml, nil
}

func testExtendedTestdataOlmCscYaml() (*asset, error) {
	bytes, err := testExtendedTestdataOlmCscYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/olm/csc.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testExtendedTestdataOlmEtcdClusterYaml = []byte(`apiVersion: v1
kind: Template
metadata:
  name: etcdCluster-template
objects:
- apiVersion: etcd.database.coreos.com/v1beta2
  kind: EtcdCluster
  metadata:
    name: "${NAME}"
    namespace: "${NAMESPACE}"
  spec:
    size: 3
    version: 3.2.13
parameters:
- name: NAME
- name: NAMESPACE
`)

func testExtendedTestdataOlmEtcdClusterYamlBytes() ([]byte, error) {
	return _testExtendedTestdataOlmEtcdClusterYaml, nil
}

func testExtendedTestdataOlmEtcdClusterYaml() (*asset, error) {
	bytes, err := testExtendedTestdataOlmEtcdClusterYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/olm/etcd-cluster.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testExtendedTestdataOlmEtcdCustomCscYaml = []byte(`apiVersion: operators.coreos.com/v1
kind: CatalogSourceConfig
metadata:
  name: etcd-custom-csc
  namespace: openshift-marketplace
spec:
  targetNamespace: openshift-operators
  packages: etcd
  source: community-operators
`)

func testExtendedTestdataOlmEtcdCustomCscYamlBytes() ([]byte, error) {
	return _testExtendedTestdataOlmEtcdCustomCscYaml, nil
}

func testExtendedTestdataOlmEtcdCustomCscYaml() (*asset, error) {
	bytes, err := testExtendedTestdataOlmEtcdCustomCscYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/olm/etcd-custom-csc.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testExtendedTestdataOlmEtcdSubscriptionManualYaml = []byte(`apiVersion: v1
kind: Template
metadata:
  name: subscription-template
objects:
- apiVersion: operators.coreos.com/v1alpha1
  kind: Subscription
  metadata:
    name: "${NAME}"
    namespace: "${NAMESPACE}"
  spec:
    channel: singlenamespace-alpha
    installPlanApproval: "${INSTALLPLAN}"
    name: etcd
    source: "${SOURCENAME}"
    sourceNamespace: "${SOURCENAMESPACE}"
    startingCSV: etcdoperator.v0.9.4
parameters:
- name: NAME
- name: NAMESPACE
- name: INSTALLPLAN
- name: SOURCENAME
- name: SOURCENAMESPACE
`)

func testExtendedTestdataOlmEtcdSubscriptionManualYamlBytes() ([]byte, error) {
	return _testExtendedTestdataOlmEtcdSubscriptionManualYaml, nil
}

func testExtendedTestdataOlmEtcdSubscriptionManualYaml() (*asset, error) {
	bytes, err := testExtendedTestdataOlmEtcdSubscriptionManualYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/olm/etcd-subscription-manual.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testExtendedTestdataOlmEtcdSubscriptionYaml = []byte(`apiVersion: v1
kind: Template
metadata:
  name: subscription-template
objects:
- apiVersion: operators.coreos.com/v1alpha1
  kind: Subscription
  metadata:
    name: "${NAME}"
    namespace: "${NAMESPACE}"
  spec:
    channel: singlenamespace-alpha
    installPlanApproval: Automatic
    name: etcd
    source: "${SOURCENAME}"
    sourceNamespace: "${SOURCENAMESPACE}"
    startingCSV: etcdoperator.v0.9.4
parameters:
- name: NAME
- name: NAMESPACE
- name: SOURCENAME
- name: SOURCENAMESPACE
`)

func testExtendedTestdataOlmEtcdSubscriptionYamlBytes() ([]byte, error) {
	return _testExtendedTestdataOlmEtcdSubscriptionYaml, nil
}

func testExtendedTestdataOlmEtcdSubscriptionYaml() (*asset, error) {
	bytes, err := testExtendedTestdataOlmEtcdSubscriptionYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/olm/etcd-subscription.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testExtendedTestdataOlmImageCatalogsourceYaml = []byte(`apiVersion: operators.coreos.com/v1alpha1
kind: CatalogSource
metadata:
  name: test-operator
  namespace: openshift-marketplace
spec:
  sourceType: grpc
  image: quay.io/olmqe/catalogsource:etcd-auto2
  displayName: Test Operators
  publisher: Test
`)

func testExtendedTestdataOlmImageCatalogsourceYamlBytes() ([]byte, error) {
	return _testExtendedTestdataOlmImageCatalogsourceYaml, nil
}

func testExtendedTestdataOlmImageCatalogsourceYaml() (*asset, error) {
	bytes, err := testExtendedTestdataOlmImageCatalogsourceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/olm/image-catalogsource.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testExtendedTestdataOlmImageSubYaml = []byte(`apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
 generateName: etcd-auto-
 namespace: openshift-operators
spec:
 source: test-operator
 sourceNamespace: openshift-marketplace
 name: etcd-auto
 channel: clusterwide-alpha
`)

func testExtendedTestdataOlmImageSubYamlBytes() ([]byte, error) {
	return _testExtendedTestdataOlmImageSubYaml, nil
}

func testExtendedTestdataOlmImageSubYaml() (*asset, error) {
	bytes, err := testExtendedTestdataOlmImageSubYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/olm/image-sub.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testExtendedTestdataOlmOgAllnsYaml = []byte(`apiVersion: v1
kind: Template
metadata:
  name: operatorgroup-allns-template
objects:
- kind: OperatorGroup
  apiVersion: operators.coreos.com/v1
  metadata:
    name: "${NAME}"
    namespace: "${NAMESPACE}"
parameters:
- name: NAME
- name: NAMESPACE

`)

func testExtendedTestdataOlmOgAllnsYamlBytes() ([]byte, error) {
	return _testExtendedTestdataOlmOgAllnsYaml, nil
}

func testExtendedTestdataOlmOgAllnsYaml() (*asset, error) {
	bytes, err := testExtendedTestdataOlmOgAllnsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/olm/og-allns.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testExtendedTestdataOlmOgMultinsYaml = []byte(`apiVersion: v1
kind: Template
metadata:
  name: operatorgroup-multins-template
objects:
- kind: OperatorGroup
  apiVersion: operators.coreos.com/v1
  metadata:
    name: "${NAME}"
    namespace: "${NAMESPACE}"
  spec:
    selector:
      matchLabels:
        env: "${MULTINSLABEL}"
parameters:
- name: NAME
- name: NAMESPACE
- name: MULTINSLABEL
`)

func testExtendedTestdataOlmOgMultinsYamlBytes() ([]byte, error) {
	return _testExtendedTestdataOlmOgMultinsYaml, nil
}

func testExtendedTestdataOlmOgMultinsYaml() (*asset, error) {
	bytes, err := testExtendedTestdataOlmOgMultinsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/olm/og-multins.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testExtendedTestdataOlmOlmSubscriptionYaml = []byte(`apiVersion: v1
kind: Template
metadata:
  name: sub-template
objects:
- apiVersion: operators.coreos.com/v1alpha1
  kind: Subscription
  metadata:
    name: "${SUBNAME}"
    namespace: "${SUBNAMESPACE}"
  spec:
    channel: "${CHANNEL}"
    installPlanApproval: "${APPROVAL}"
    name: "${OPERATORNAME}"
    source: "${SOURCENAME}"
    sourceNamespace: "${SOURCENAMESPACE}"
    startingCSV: "${STARTINGCSV}"
parameters:
- name: SUBNAME
- name: SUBNAMESPACE
- name: CHANNEL
- name: APPROVAL
  value: "Automatic"
- name: OPERATORNAME
- name: SOURCENAME
- name: SOURCENAMESPACE
  value: "openshift-marketplace"
- name: STARTINGCSV
  value: ""
`)

func testExtendedTestdataOlmOlmSubscriptionYamlBytes() ([]byte, error) {
	return _testExtendedTestdataOlmOlmSubscriptionYaml, nil
}

func testExtendedTestdataOlmOlmSubscriptionYaml() (*asset, error) {
	bytes, err := testExtendedTestdataOlmOlmSubscriptionYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/olm/olm-subscription.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testExtendedTestdataOlmOperatorgroupYaml = []byte(`apiVersion: v1
kind: Template
metadata:
  name: operatorgroup-template
objects:
- kind: OperatorGroup
  apiVersion: operators.coreos.com/v1
  metadata:
    name: "${NAME}"
    namespace: "${NAMESPACE}"
  spec:
    targetNamespaces:
    - "${NAMESPACE}"

parameters:
- name: NAME
- name: NAMESPACE
  
`)

func testExtendedTestdataOlmOperatorgroupYamlBytes() ([]byte, error) {
	return _testExtendedTestdataOlmOperatorgroupYaml, nil
}

func testExtendedTestdataOlmOperatorgroupYaml() (*asset, error) {
	bytes, err := testExtendedTestdataOlmOperatorgroupYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/olm/operatorgroup.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testExtendedTestdataOlmOpsrcYaml = []byte(`apiVersion: v1
kind: Template
metadata:
  name: opsrc-template
objects:
- kind: OperatorSource
  apiVersion: operators.coreos.com/v1
  metadata:
    name: "${NAME}"
    namespace: "${NAMESPACE}"
    labels:
      opsrc-provider: "${NAMELABEL}"
  spec:
    type: appregistry
    endpoint: "https://quay.io/cnr"
    registryNamespace: "${REGISTRYNAMESPACE}"
    displayName: "${DISPLAYNAME}"
    publisher: "${PUBLISHER}"
parameters:
- name: NAME
- name: NAMESPACE
- name: NAMELABEL
- name: REGISTRYNAMESPACE
- name: DISPLAYNAME
- name: PUBLISHER
`)

func testExtendedTestdataOlmOpsrcYamlBytes() ([]byte, error) {
	return _testExtendedTestdataOlmOpsrcYaml, nil
}

func testExtendedTestdataOlmOpsrcYaml() (*asset, error) {
	bytes, err := testExtendedTestdataOlmOpsrcYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/olm/opsrc.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testExtendedTestdataOperatorsCouchbaseEnterpriseCrYaml = []byte(`apiVersion: v1
kind: Secret
metadata:
  name: cb-example-auth
type: Opaque
data:
  username: QWRtaW5pc3RyYXRvcg==
  password: cGFzc3dvcmQ=
---
apiVersion: couchbase.com/v2
kind: CouchbaseCluster
metadata:
  name: cb-example
spec:
  image: registry.hub.docker.com/couchbase/server:6.5.1
  cluster:
    clusterName: cb-example
    dataServiceMemoryQuota: 256Mi
    indexServiceMemoryQuota: 256Mi
    searchServiceMemoryQuota: 256Mi
    eventingServiceMemoryQuota: 256Mi
    analyticsServiceMemoryQuota: 1Gi
    indexStorageSetting: memory_optimized
    autoFailoverTimeout: 120s
    autoFailoverMaxCount: 3
    autoFailoverOnDataDiskIssues: true
    autoFailoverOnDataDiskIssuesTimePeriod: 120s
    autoFailoverServerGroup: false
    autoCompaction:
      databaseFragmentationThreshold:
        percent: 30
        size: 1Gi
      viewFragmentationThreshold:
        percent: 30
        size: 1Gi
      parallelCompaction: false
      timeWindow:
        start: '02:00'
        end: '06:00'
        abortCompactionOutsideWindow: true
      tombstonePurgeInterval: 72h
  security:
    adminSecret: cb-example-auth
    rbac:
      managed: true
      selector:
        matchLabels:
          cluster: cb-example
  xdcr:
    managed: false
    selector:
      matchLabels:
        cluster: cb-example
  backup:
    image: registry.hub.docker.com/couchbase/operator-backup:6.5.1-104
    managed: false
    serviceAccountName: couchbase-backup
    selector:
      matchLabels:
        cluster: cb-example
  monitoring:
    prometheus:
      enabled: false
      image: registry.hub.docker.com/couchbase/exporter:1.0.2
  networking:
    exposeAdminConsole: true
    adminConsoleServices:
    - data
    exposedFeatures:
    - xdcr
    exposedFeatureServiceType: NodePort
    adminConsoleServiceType: NodePort
  buckets:
    managed: true
    selector:
      matchLabels:
        cluster: cb-example
  logRetentionTime: 604800s
  logRetentionCount: 20
  servers:
  - size: 3
    name: all_services
    services:
    - data
    - index
    - query
    - search
    - eventing
    - analytics
status: {}
`)

func testExtendedTestdataOperatorsCouchbaseEnterpriseCrYamlBytes() ([]byte, error) {
	return _testExtendedTestdataOperatorsCouchbaseEnterpriseCrYaml, nil
}

func testExtendedTestdataOperatorsCouchbaseEnterpriseCrYaml() (*asset, error) {
	bytes, err := testExtendedTestdataOperatorsCouchbaseEnterpriseCrYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/operators/couchbase-enterprise-cr.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testExtendedTestdataOperatorsJaegerYaml = []byte(`apiVersion: jaegertracing.io/v1
kind: Jaeger
metadata:
  name: jaeger-all-in-one-inmemory
  namespace: openshift-operators
`)

func testExtendedTestdataOperatorsJaegerYamlBytes() ([]byte, error) {
	return _testExtendedTestdataOperatorsJaegerYaml, nil
}

func testExtendedTestdataOperatorsJaegerYaml() (*asset, error) {
	bytes, err := testExtendedTestdataOperatorsJaegerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/operators/jaeger.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testExtendedTestdataOperatorsKafkaYaml = []byte(`apiVersion: kafka.strimzi.io/v1beta1
kind: Kafka
metadata:
  name: my-cluster
  labels: {}
  namespace: amq-streams
spec:
  kafka:
    config:
      offsets.topic.replication.factor: 3
      transaction.state.log.replication.factor: 3
      transaction.state.log.min.isr: 2
      log.message.format.version: '2.5'
    version: 2.5.0
    storage:
      type: ephemeral
    listeners:
      plain: {}
    replicas: 3
  zookeeper:
    storage:
      type: ephemeral
    replicas: 3
`)

func testExtendedTestdataOperatorsKafkaYamlBytes() ([]byte, error) {
	return _testExtendedTestdataOperatorsKafkaYaml, nil
}

func testExtendedTestdataOperatorsKafkaYaml() (*asset, error) {
	bytes, err := testExtendedTestdataOperatorsKafkaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/operators/kafka.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testExtendedTestdataOperatorsKeycloakCrYaml = []byte(`apiVersion: keycloak.org/v1alpha1
kind: Keycloak
metadata:
  name: example-keycloak
  labels:
    app: sso
  namespace: keycloak
spec:
  externalAccess:
    enabled: true
  extensions:
    - >-
      https://github.com/aerogear/keycloak-metrics-spi/releases/download/1.0.4/keycloak-metrics-spi-1.0.4.jar
  instances: 1
`)

func testExtendedTestdataOperatorsKeycloakCrYamlBytes() ([]byte, error) {
	return _testExtendedTestdataOperatorsKeycloakCrYaml, nil
}

func testExtendedTestdataOperatorsKeycloakCrYaml() (*asset, error) {
	bytes, err := testExtendedTestdataOperatorsKeycloakCrYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/operators/keycloak-cr.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testExtendedTestdataOperatorsMongodbOpsManagerCrYaml = []byte(`apiVersion: mongodb.com/v1
kind: MongoDBOpsManager
metadata:
  name: ops-manager
  namespace: mongodb
spec:
  externalConnectivity:
    type: LoadBalancer
  applicationDatabase:
    podSpec:
      cpu: '1'
    persistent: true
    members: 3
  adminCredentials: opsman-admin-credentials
  configuration:
    mms.fromEmailAddr: admin@thecompany.com
  version: 4.4.1
`)

func testExtendedTestdataOperatorsMongodbOpsManagerCrYamlBytes() ([]byte, error) {
	return _testExtendedTestdataOperatorsMongodbOpsManagerCrYaml, nil
}

func testExtendedTestdataOperatorsMongodbOpsManagerCrYaml() (*asset, error) {
	bytes, err := testExtendedTestdataOperatorsMongodbOpsManagerCrYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/operators/mongodb-ops-manager-cr.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testExtendedTestdataOperatorsMongodbOpsManagerSecretYaml = []byte(`apiVersion: v1
kind: Secret
stringData:
  FirstName: Operations
  LastName: Manager
  Password: ")4Rv:yS@G@Z]"
  Username: opsman4444
type: Opaque
metadata:
  name: opsman-admin-credentials
`)

func testExtendedTestdataOperatorsMongodbOpsManagerSecretYamlBytes() ([]byte, error) {
	return _testExtendedTestdataOperatorsMongodbOpsManagerSecretYaml, nil
}

func testExtendedTestdataOperatorsMongodbOpsManagerSecretYaml() (*asset, error) {
	bytes, err := testExtendedTestdataOperatorsMongodbOpsManagerSecretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/operators/mongodb-ops-manager-secret.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testExtendedTestdataOperatorsOperator_groupYaml = []byte(`apiVersion: operators.coreos.com/v1
kind: OperatorGroup
metadata:
  name: test-operators
spec:
  targetNamespaces:
  - $OPERATOR_NAMESPACE`)

func testExtendedTestdataOperatorsOperator_groupYamlBytes() ([]byte, error) {
	return _testExtendedTestdataOperatorsOperator_groupYaml, nil
}

func testExtendedTestdataOperatorsOperator_groupYaml() (*asset, error) {
	bytes, err := testExtendedTestdataOperatorsOperator_groupYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/operators/operator_group.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testExtendedTestdataOperatorsPortworxSnodeCrYaml = []byte(`apiVersion: core.libopenstorage.org/v1alpha1
kind: StorageNode
metadata:
  name: storagenode-example
  namespace: portworx-certified
`)

func testExtendedTestdataOperatorsPortworxSnodeCrYamlBytes() ([]byte, error) {
	return _testExtendedTestdataOperatorsPortworxSnodeCrYaml, nil
}

func testExtendedTestdataOperatorsPortworxSnodeCrYaml() (*asset, error) {
	bytes, err := testExtendedTestdataOperatorsPortworxSnodeCrYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/operators/portworx-snode-cr.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testExtendedTestdataOperatorsSparkGcpSparkapplicationCrYaml = []byte(`
apiVersion: "sparkoperator.k8s.io/v1beta1"
kind: SparkApplication
metadata:
  name: spark-pi
  namespace: spark-gcp
spec:
  type: Scala
  mode: cluster
  image: "gcr.io/spark-operator/spark:v2.4.4"
  imagePullPolicy: Always
  mainClass: org.apache.spark.examples.SparkPi
  mainApplicationFile: "local:///opt/spark/examples/jars/spark-examples_2.11-2.4.4.jar"
  sparkVersion: "2.4.4"
  restartPolicy:
    type: Never
  volumes:
    - name: "test-volume"
      hostPath:
        path: "/tmp"
        type: Directory
  driver:
    cores: 1
    coreLimit: "1200m"
    memory: "512m"
    labels:
      version: 2.4.4
    serviceAccount: spark
    volumeMounts:
      - name: "test-volume"
        mountPath: "/tmp"
  executor:
    cores: 1
    instances: 1
    memory: "512m"
    labels:
      version: 2.4.4
    volumeMounts:
      - name: "test-volume"
        mountPath: "/tmp"
`)

func testExtendedTestdataOperatorsSparkGcpSparkapplicationCrYamlBytes() ([]byte, error) {
	return _testExtendedTestdataOperatorsSparkGcpSparkapplicationCrYaml, nil
}

func testExtendedTestdataOperatorsSparkGcpSparkapplicationCrYaml() (*asset, error) {
	bytes, err := testExtendedTestdataOperatorsSparkGcpSparkapplicationCrYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/operators/spark-gcp-sparkapplication-cr.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testExtendedTestdataOperatorsStrimziCrYaml = []byte(`apiVersion: kafka.strimzi.io/v1beta1
kind: Kafka
metadata:
  name: my-cluster
  namespace: strimzi
spec:
  kafka:
    version: 2.5.0
    replicas: 3
    listeners:
      plain: {}
      tls: {}
    config:
      offsets.topic.replication.factor: 3
      transaction.state.log.replication.factor: 3
      transaction.state.log.min.isr: 2
      log.message.format.version: "2.5"
    storage:
      type: ephemeral
  zookeeper:
    replicas: 3
    storage:
      type: ephemeral
  entityOperator:
    topicOperator: {}
    userOperator: {}
`)

func testExtendedTestdataOperatorsStrimziCrYamlBytes() ([]byte, error) {
	return _testExtendedTestdataOperatorsStrimziCrYaml, nil
}

func testExtendedTestdataOperatorsStrimziCrYaml() (*asset, error) {
	bytes, err := testExtendedTestdataOperatorsStrimziCrYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/operators/strimzi-cr.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testExtendedTestdataOperatorsSubscriptionYaml = []byte(`apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: $OPERATOR_PACKAGE_NAME
  namespace: $OPERATOR_NAMESPACE
spec:
  channel: $OPERATOR_CHANNEL
  installPlanApproval: $OPERATOR_INSTALLPLAN_APPROVAL
  name: $OPERATOR_PACKAGE_NAME
  source: $OPERATOR_SOURCE
  sourceNamespace: $OPERATOR_CATALOG_NAMESPACE
  startingCSV: $OPERATOR_CURRENT_CSV_VERSION`)

func testExtendedTestdataOperatorsSubscriptionYamlBytes() ([]byte, error) {
	return _testExtendedTestdataOperatorsSubscriptionYaml, nil
}

func testExtendedTestdataOperatorsSubscriptionYaml() (*asset, error) {
	bytes, err := testExtendedTestdataOperatorsSubscriptionYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/operators/subscription.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"test/extended/testdata/bindata.go":                                   testExtendedTestdataBindataGo,
	"test/extended/testdata/olm/25782-catalogsource.yaml":                 testExtendedTestdataOlm25782CatalogsourceYaml,
	"test/extended/testdata/olm/25782-operator.yaml":                      testExtendedTestdataOlm25782OperatorYaml,
	"test/extended/testdata/olm/catalogsource-address.yaml":               testExtendedTestdataOlmCatalogsourceAddressYaml,
	"test/extended/testdata/olm/catalogsource-configmap.yaml":             testExtendedTestdataOlmCatalogsourceConfigmapYaml,
	"test/extended/testdata/olm/catalogsource-image.yaml":                 testExtendedTestdataOlmCatalogsourceImageYaml,
	"test/extended/testdata/olm/cm-certutil-readytest.yaml":               testExtendedTestdataOlmCmCertutilReadytestYaml,
	"test/extended/testdata/olm/cm-certutil-readytests.yaml":              testExtendedTestdataOlmCmCertutilReadytestsYaml,
	"test/extended/testdata/olm/cm-learn-v1.yaml":                         testExtendedTestdataOlmCmLearnV1Yaml,
	"test/extended/testdata/olm/cm-learn-v2.yaml":                         testExtendedTestdataOlmCmLearnV2Yaml,
	"test/extended/testdata/olm/cm-lightbend.yaml":                        testExtendedTestdataOlmCmLightbendYaml,
	"test/extended/testdata/olm/cm-namespaceconfig.yaml":                  testExtendedTestdataOlmCmNamespaceconfigYaml,
	"test/extended/testdata/olm/configmap-test.yaml":                      testExtendedTestdataOlmConfigmapTestYaml,
	"test/extended/testdata/olm/cs-without-image.yaml":                    testExtendedTestdataOlmCsWithoutImageYaml,
	"test/extended/testdata/olm/csc.yaml":                                 testExtendedTestdataOlmCscYaml,
	"test/extended/testdata/olm/etcd-cluster.yaml":                        testExtendedTestdataOlmEtcdClusterYaml,
	"test/extended/testdata/olm/etcd-custom-csc.yaml":                     testExtendedTestdataOlmEtcdCustomCscYaml,
	"test/extended/testdata/olm/etcd-subscription-manual.yaml":            testExtendedTestdataOlmEtcdSubscriptionManualYaml,
	"test/extended/testdata/olm/etcd-subscription.yaml":                   testExtendedTestdataOlmEtcdSubscriptionYaml,
	"test/extended/testdata/olm/image-catalogsource.yaml":                 testExtendedTestdataOlmImageCatalogsourceYaml,
	"test/extended/testdata/olm/image-sub.yaml":                           testExtendedTestdataOlmImageSubYaml,
	"test/extended/testdata/olm/og-allns.yaml":                            testExtendedTestdataOlmOgAllnsYaml,
	"test/extended/testdata/olm/og-multins.yaml":                          testExtendedTestdataOlmOgMultinsYaml,
	"test/extended/testdata/olm/olm-subscription.yaml":                    testExtendedTestdataOlmOlmSubscriptionYaml,
	"test/extended/testdata/olm/operatorgroup.yaml":                       testExtendedTestdataOlmOperatorgroupYaml,
	"test/extended/testdata/olm/opsrc.yaml":                               testExtendedTestdataOlmOpsrcYaml,
	"test/extended/testdata/operators/couchbase-enterprise-cr.yaml":       testExtendedTestdataOperatorsCouchbaseEnterpriseCrYaml,
	"test/extended/testdata/operators/jaeger.yaml":                        testExtendedTestdataOperatorsJaegerYaml,
	"test/extended/testdata/operators/kafka.yaml":                         testExtendedTestdataOperatorsKafkaYaml,
	"test/extended/testdata/operators/keycloak-cr.yaml":                   testExtendedTestdataOperatorsKeycloakCrYaml,
	"test/extended/testdata/operators/mongodb-ops-manager-cr.yaml":        testExtendedTestdataOperatorsMongodbOpsManagerCrYaml,
	"test/extended/testdata/operators/mongodb-ops-manager-secret.yaml":    testExtendedTestdataOperatorsMongodbOpsManagerSecretYaml,
	"test/extended/testdata/operators/operator_group.yaml":                testExtendedTestdataOperatorsOperator_groupYaml,
	"test/extended/testdata/operators/portworx-snode-cr.yaml":             testExtendedTestdataOperatorsPortworxSnodeCrYaml,
	"test/extended/testdata/operators/spark-gcp-sparkapplication-cr.yaml": testExtendedTestdataOperatorsSparkGcpSparkapplicationCrYaml,
	"test/extended/testdata/operators/strimzi-cr.yaml":                    testExtendedTestdataOperatorsStrimziCrYaml,
	"test/extended/testdata/operators/subscription.yaml":                  testExtendedTestdataOperatorsSubscriptionYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"test": {nil, map[string]*bintree{
		"extended": {nil, map[string]*bintree{
			"testdata": {nil, map[string]*bintree{
				"bindata.go": {testExtendedTestdataBindataGo, map[string]*bintree{}},
				"olm": {nil, map[string]*bintree{
					"25782-catalogsource.yaml":      {testExtendedTestdataOlm25782CatalogsourceYaml, map[string]*bintree{}},
					"25782-operator.yaml":           {testExtendedTestdataOlm25782OperatorYaml, map[string]*bintree{}},
					"catalogsource-address.yaml":    {testExtendedTestdataOlmCatalogsourceAddressYaml, map[string]*bintree{}},
					"catalogsource-configmap.yaml":  {testExtendedTestdataOlmCatalogsourceConfigmapYaml, map[string]*bintree{}},
					"catalogsource-image.yaml":      {testExtendedTestdataOlmCatalogsourceImageYaml, map[string]*bintree{}},
					"cm-certutil-readytest.yaml":    {testExtendedTestdataOlmCmCertutilReadytestYaml, map[string]*bintree{}},
					"cm-certutil-readytests.yaml":   {testExtendedTestdataOlmCmCertutilReadytestsYaml, map[string]*bintree{}},
					"cm-learn-v1.yaml":              {testExtendedTestdataOlmCmLearnV1Yaml, map[string]*bintree{}},
					"cm-learn-v2.yaml":              {testExtendedTestdataOlmCmLearnV2Yaml, map[string]*bintree{}},
					"cm-lightbend.yaml":             {testExtendedTestdataOlmCmLightbendYaml, map[string]*bintree{}},
					"cm-namespaceconfig.yaml":       {testExtendedTestdataOlmCmNamespaceconfigYaml, map[string]*bintree{}},
					"configmap-test.yaml":           {testExtendedTestdataOlmConfigmapTestYaml, map[string]*bintree{}},
					"cs-without-image.yaml":         {testExtendedTestdataOlmCsWithoutImageYaml, map[string]*bintree{}},
					"csc.yaml":                      {testExtendedTestdataOlmCscYaml, map[string]*bintree{}},
					"etcd-cluster.yaml":             {testExtendedTestdataOlmEtcdClusterYaml, map[string]*bintree{}},
					"etcd-custom-csc.yaml":          {testExtendedTestdataOlmEtcdCustomCscYaml, map[string]*bintree{}},
					"etcd-subscription-manual.yaml": {testExtendedTestdataOlmEtcdSubscriptionManualYaml, map[string]*bintree{}},
					"etcd-subscription.yaml":        {testExtendedTestdataOlmEtcdSubscriptionYaml, map[string]*bintree{}},
					"image-catalogsource.yaml":      {testExtendedTestdataOlmImageCatalogsourceYaml, map[string]*bintree{}},
					"image-sub.yaml":                {testExtendedTestdataOlmImageSubYaml, map[string]*bintree{}},
					"og-allns.yaml":                 {testExtendedTestdataOlmOgAllnsYaml, map[string]*bintree{}},
					"og-multins.yaml":               {testExtendedTestdataOlmOgMultinsYaml, map[string]*bintree{}},
					"olm-subscription.yaml":         {testExtendedTestdataOlmOlmSubscriptionYaml, map[string]*bintree{}},
					"operatorgroup.yaml":            {testExtendedTestdataOlmOperatorgroupYaml, map[string]*bintree{}},
					"opsrc.yaml":                    {testExtendedTestdataOlmOpsrcYaml, map[string]*bintree{}},
				}},
				"operators": {nil, map[string]*bintree{
					"couchbase-enterprise-cr.yaml":       {testExtendedTestdataOperatorsCouchbaseEnterpriseCrYaml, map[string]*bintree{}},
					"jaeger.yaml":                        {testExtendedTestdataOperatorsJaegerYaml, map[string]*bintree{}},
					"kafka.yaml":                         {testExtendedTestdataOperatorsKafkaYaml, map[string]*bintree{}},
					"keycloak-cr.yaml":                   {testExtendedTestdataOperatorsKeycloakCrYaml, map[string]*bintree{}},
					"mongodb-ops-manager-cr.yaml":        {testExtendedTestdataOperatorsMongodbOpsManagerCrYaml, map[string]*bintree{}},
					"mongodb-ops-manager-secret.yaml":    {testExtendedTestdataOperatorsMongodbOpsManagerSecretYaml, map[string]*bintree{}},
					"operator_group.yaml":                {testExtendedTestdataOperatorsOperator_groupYaml, map[string]*bintree{}},
					"portworx-snode-cr.yaml":             {testExtendedTestdataOperatorsPortworxSnodeCrYaml, map[string]*bintree{}},
					"spark-gcp-sparkapplication-cr.yaml": {testExtendedTestdataOperatorsSparkGcpSparkapplicationCrYaml, map[string]*bintree{}},
					"strimzi-cr.yaml":                    {testExtendedTestdataOperatorsStrimziCrYaml, map[string]*bintree{}},
					"subscription.yaml":                  {testExtendedTestdataOperatorsSubscriptionYaml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
