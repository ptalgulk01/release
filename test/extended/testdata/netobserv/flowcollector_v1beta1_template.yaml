apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: FlowCollector-template
objects:
  - apiVersion: flows.netobserv.io/v1beta1
    kind: FlowCollector
    metadata:
      name: cluster
    spec:
      namespace: "${NAMESPACE}"
      deploymentModel: "${DEPLOYMENT_MODEL}"
      agent:
        type: EBPF
        ipfix:
          cacheActiveTimeout: 20s
          cacheMaxFlows: 400
          sampling: 400
          clusterNetworkOperator:
            namespace: openshift-network-operator
          ovnKubernetes:
            namespace: ovn-kubernetes
            daemonSetName: ovnkube-node
            containerName: ovnkube-node
        ebpf:
          imagePullPolicy: IfNotPresent
          sampling: 1
          cacheActiveTimeout: ${EBPF_CACHEACTIVETIMEOUT}
          cacheMaxFlows: 100000
          interfaces: [ ]
          excludeInterfaces: ["lo"]
          logLevel: info
          privileged: "${{EBPF_PRIVILEGED}}"
          enablePktDrop: "${{PACKET_DROP_ENABLE}}"
          enableDNSTracking: "${{DNS_TRACKING_ENABLE}}"
          resources:
            requests:
              memory: 50Mi
              cpu: 100m
            limits:
              memory: 800Mi
          kafkaBatchSize: 10485760
      processor:
        port: 2055
        imagePullPolicy: IfNotPresent
        logLevel: trace
        profilePort: 6060
        metrics:
          server:
            port: 9102
            tls:
              type: "${METRIC_SERVER_TLS_TYPE}"
          ignoreTags:
            - egress
            - packets
          disablealerts: []
        dropUnusedFields: true
        resources:
          requests:
            memory: 100Mi
            cpu: 100m
          limits:
            memory: 800Mi
        kafkaConsumerReplicas: 3
        kafkaConsumerAutoscaler: null
        kafkaConsumerQueueCapacity: 1000
        kafkaConsumerBatchSize: 10485760
        logTypes: "${LOG_TYPE}"
        conversationTerminatingTimeout: 5s
        conversationHeartbeatInterval: 30s
        conversationEndTimeout: 10s
      kafka:
        address: "${KAFKA_ADDRESS}"
        topic: "${KAFKA_TOPIC}"
        tls:
          enable: "${{KAFKA_TLS_ENABLE}}"
          caCert:
            type: secret
            name: "${KAFKA_CLUSTER_NAME}-cluster-ca-cert"
            certFile: ca.crt
            namespace: "${KAFKA_NAMESPACE}"
          userCert:
            type: secret
            name: "${KAFKA_USER}"
            certFile: user.crt
            certKey: user.key
            namespace: "${KAFKA_NAMESPACE}"
      loki:
        enable: "${{LOKI_ENABLE}}"
        authToken: FORWARD
        url: "${LOKI_URL}"
        statusUrl: "${LOKI_STATUS_URL}"
        tls:
          enable: "${{LOKI_TLS_ENABLE}}"
          caCert:
            type: configmap
            name: "${LOKI_TLS_CERT_NAME}"
            certFile: service-ca.crt
            namespace: "${LOKI_NAMESPACE}"
          insecureSkipVerify: false
        statusTls:
          enable: "${{LOKI_STATUS_TLS_ENABLE}}"
          caCert:
            certFile: service-ca.crt
            name: "${LOKI_STATUS_TLS_CERT_NAME}"
            type: configmap
            namespace: "${LOKI_NAMESPACE}"
          insecureSkipVerify: false
          userCert:
            certFile: tls.crt
            certKey: tls.key
            name: "${LOKI_STATUS_TLS_USER_CERT_NAME}"
            type: secret
            namespace: "${LOKI_NAMESPACE}"
        batchWait: 1s
        batchSize: 10485760
        minBackoff: 1s
        maxBackoff: 5s
        maxRetries: 2
      consolePlugin:
        enable: "${{PLUGIN_ENABLE}}"
        register: true
        imagePullPolicy: IfNotPresent
        port: 9001
        logLevel: info
        autoscaler:
          status: DISABLED
          minReplicas: 1
          maxReplicas: 3
          metrics:
          - type: Resource
            resource:
              name: cpu
              target:
                type: Utilization
              averageUtilization: 50
        portNaming:
          enable: true
          portNames:
            "3100": loki
        quickFilters:
        - name: Applications
          filter:
            src_namespace!: 'openshift-,netobserv'
            dst_namespace!: 'openshift-,netobserv'
          default: true
        - name: Infrastructure
          filter:
            src_namespace: 'openshift-,netobserv'
            dst_namespace: 'openshift-,netobserv'
        - name: Pods network
          filter:
            src_kind: 'Pod'
            dst_kind: 'Pod'
          default: true
        - name: Services network
          filter:
            dst_kind: 'Service'
      exporters: []
parameters:
  - name: NAMESPACE
    description: "namespace where you want flowlogsPipeline and consoleplugin pods to be deployed"
    value: "netobserv"
  - name: DEPLOYMENT_MODEL
    value: "DIRECT"
  - name: EBPF_CACHEACTIVETIMEOUT
    value: 15s
  - name: EBPF_PRIVILEGED
    value: "false"
  - name: PACKET_DROP_ENABLE
    value: "false"
  - name: DNS_TRACKING_ENABLE
    value: "false"
  - name: METRIC_SERVER_TLS_TYPE
    value: "DISABLED"
  - name: LOG_TYPE
    value: "FLOWS"
  - name: LOKI_ENABLE
    value: "true"
  - name: LOKI_URL
    value: "https://lokistack-gateway-http.netobserv.svc.cluster.local:8080/api/logs/v1/network/"
  - name: LOKI_TLS_ENABLE
    value: "false"
  - name: LOKI_TLS_CERT_NAME
    value: "lokistack-gateway-ca-bundle"
  - name: LOKI_STATUS_URL
    value: ""
  - name: LOKI_STATUS_TLS_ENABLE
    value: "false"
  - name: LOKI_STATUS_TLS_CERT_NAME
    value: "lokistack-ca-bundle"
  - name: LOKI_STATUS_TLS_USER_CERT_NAME
    value: "lokistack-query-frontend-http"
  - name: "LOKI_NAMESPACE"
    value: "netobserv"
  - name: KAFKA_ADDRESS
    value: "kafka-cluster-kafka-bootstrap.netobserv"
  - name: KAFKA_TLS_ENABLE
    value: "false"
  - name: KAFKA_CLUSTER_NAME
    value: "kafka-cluster"
  - name: KAFKA_TOPIC
    value: "network-flows"
  - name: KAFKA_USER
    value: "flp-kafka"
  - name: KAFKA_NAMESPACE
    value: "netobserv"
  - name: PLUGIN_ENABLE
    value: "true"
