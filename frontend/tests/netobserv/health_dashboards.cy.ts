import { Operator, project } from "../../views/netobserv"
import { catalogSources } from "../../views/catalog-source"
import { dashboard, dashboardSelectors } from "views/dashboards-page"

const healthPanels = [
    "flows-per-second-chart",
    "sampling-chart",
    "errors-last-minute-chart",
    "dropped-flows-per-second-chart"
]

const flowPanels = [
    "flows-per-second-chart",
    "flows-overhead-(%-generated-by-netobserv-own-traffic)-chart",
    "by-namespace-chart",
    "by-node-chart"
]

const eBPFPanels = [
    "eviction-rate-chart",
    "evicted-flows-rate-chart",
    "dropped-flows-rate-chart",
    "ringbuffer-/-hashmap-ratio-chart",
    "buffer-size-chart",
    "filtered-flows-rate-chart"
]

const operatorPanels = [
    "reconcile-events-per-minute-chart",
    "average-and-p99-reconcile-time-chart"
]

const resourcePanels = [
    "overall-cpu-chart",
    "overall-memory-chart",
    "ebpf-agent-cpu---top-10-pods-chart",
    "ebpf-agent-memory---top-10-pods-chart",
    "flowlogs-pipeline-cpu---top-10-pods-chart",
    "flowlogs-pipeline-memory---top-10-pods-chart"
]

describe('Network_Observability health dashboards tests', { tags: ['Network_Observability'] }, function () {

    before('any test', function () {
        cy.adminCLI(`oc adm policy add-cluster-role-to-user cluster-admin ${Cypress.env('LOGIN_USERNAME')}`)
        cy.login(Cypress.env('LOGIN_IDP'), Cypress.env('LOGIN_USERNAME'), Cypress.env('LOGIN_PASSWORD'))
        cy.switchPerspective('Administrator');

        // specify --env noo_release=upstream to run tests
        // from most recent "main" image
        let catalogImg
        let catalogDisplayName = "Production Operators"
        const catSrc = Cypress.env('noo_catalog_src')
        if (catSrc == "upstream") {
            catalogImg = 'quay.io/netobserv/network-observability-operator-catalog:v0.0.0-main'
            this.catalogSource = "netobserv-test"
            catalogDisplayName = "NetObserv QE"
            catalogSources.createCustomCatalog(catalogImg, this.catalogSource, catalogDisplayName)
        }
        else {
            catalogSources.enableQECatalogSource(this.catalogSource, catalogDisplayName)
        }
        Operator.install(catalogDisplayName)
        Operator.createFlowcollector(project, "AllMetrics")
    })

    it('(OCP-61893, memodi, Network_Observability), should have health dashboards', function () {
        // navigate to 'NetObserv / Health' Dashboard page
        // all health panels are visible with default metrics
        dashboard.visit()
        dashboard.visitDashboard("grafana-dashboard-netobserv-health")

        // verify that 'Flows per second', 'Sampling', 'Errors last minute' and 'Dropped flows per second' panels exist and are populated
        cy.checkDashboards(healthPanels)

        // verify that 'Flows per second', 'Flows overhead (% generated by NetObserv own traffic)', 'Errors per minute', 'By namespace' and 'By node' panels exist and are populated
        cy.checkDashboards(flowPanels)

        cy.get(dashboardSelectors.flowStatsToggle).should('exist').click()
        cy.get(dashboardSelectors.ebpfStatsToggle).should('exist').click()

        // verify that 'Eviction rate', 'Evicted flows rate', 'Dropped flows rate', 'Ringbuffer / HashMap ratio', 'Buffer size' and 'Errors per minute' panels exist and are populated
        cy.checkDashboards(eBPFPanels)

        cy.get(dashboardSelectors.ebpfStatsToggle).should('exist').click()
        cy.get(dashboardSelectors.operatorStatsToggle).should('exist').click()

        // verify that 'Reconcile events per minute' and 'Average and P99 reconcile time' panels exist and are populated
        cy.checkDashboards(operatorPanels)

        cy.get(dashboardSelectors.operatorStatsToggle).should('exist').click()
        cy.get(dashboardSelectors.resourceStatsToggle).should('exist').click()

        // verify that 'Overall CPU', 'Overall memory', 'eBPF agent CPU - top 10 pods', 'eBPF agent memory - top 10 pods', 'Flowlogs-pipeline CPU - top 10 pods' and 'Flowlogs-pipeline memory - top 10 pods' panels exist and are populated
        cy.checkDashboards(resourcePanels)
    })

    after("delete flowcollector and NetObs Operator", function () {
        Operator.deleteFlowCollector()
        cy.adminCLI(`oc adm policy remove-cluster-role-from-user cluster-admin ${Cypress.env('LOGIN_USERNAME')}`)
    })
})
